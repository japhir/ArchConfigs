#+title: My Literate emacs config
This is my config file for [[emacs.org]]!

* set gc-cons threshold
The gc-cons-threshold is set to a superlarge number for faster startup time. It
is reset at [[*reset gc-cons-threshold][reset gc-cons-threshold]].
#+begin_src emacs-lisp
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)
#+end_src

* log startup time
stolen from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance][David Wilson's config]]
#+begin_src emacs-lisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src
* use-package
Use-package is an amazing resource to clean up my init file and have it play
nice on both my desktop and laptop.
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
  (use-package diminish)  ; to omit lines from the mode-line
  (use-package bind-key)  ; for easy keybindings
#+end_src
* COMMENT straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
* dirvar
define dirvars 'org-in-file', 'org-gtd-file', etc.
#+begin_src emacs-lisp
  (defvar org-in-file "~/org/inbox.org"
    "GTD Inbox")
  (defvar org-gtd-file "~/org/todo.org"
    "Personal TODO's")
  (defvar org-tickler-file "~/org/tickler.org"
    "Tickler")
  (defvar org-clumped-file "~/org/clumpednotes.org"
    "Work TODO's")
  (defvar org-notes-file "~/org/notes.org"
    "General Notes and Protocols")
  (defvar org-someday-file "~/org/someday.org"
    "Someday/Maybe")
  (defvar org-journal-file "~/org/journal.org"
    "Journal")
  (defvar org-lists-file "~/org/lists.org"
    "Lists of Movies etc.")
  (defvar org-cal-file "~/org/calendars/gcal.org"
    "Google Calendar")
#+end_src
* org-roam/notes/ref directories
see [[*org-roam][org-roam]]
#+begin_src emacs-lisp
  (setq
   org_notes (concat (getenv "HOME") "/SurfDrive/bibliography/notes/")
   zot_bib (concat (getenv "HOME") "/SurfDrive/bibliography/bibliography.bib")
   org-directory org_notes
   org-roam-dailies-directory (concat org_notes "daily")
   deft-directory org_notes
   org-roam-directory org_notes
   org-roam-db-location (concat org_notes "org-roam.db"))
#+end_src
* interface
** turn off UI elements and small tweaks
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (setq initial-major-mode 'org-mode)
  (scroll-bar-mode -1)   ; turn off the scroll bar
  (tool-bar-mode -1)     ; turn off the tool bar
  (menu-bar-mode -1)     ; turn off the menu
  (setq visible-bell 1)  ; turn off beeps, make them flash!
  (global-hl-line-mode t)
  ;; typing
  (setq-default fill-column 79)
  (setq sentence-end-double-space nil)
  ;; typed text will replace highlighted region
  (delete-selection-mode 1)
  ;; backspace deletes one character instead of one column
  (global-set-key (kbd "DEL") 'backward-delete-char)
  ;; remove trailing whitespace before save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; prefer utf-8
  (prefer-coding-system 'utf-8-unix)

  (setq mouse-wheel-progressive-speed nil)

  ;; automatically re-open files that have been changed on disk
  (global-auto-revert-mode 1)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; always follow symlinks w/o asking
  (require 'vc-hooks)
  (setq vc-follow-symlinks t)
#+end_src
** auto-save
auto-save when I exit normal mode
#+begin_src emacs-lisp
  (defun my-save-if-bufferfilename ()
    (if (buffer-file-name)
        (progn (save-buffer))
          (message "no file is associated to this buffer: do nothing")))
  (add-hook 'evil-insert-state-exit-hook 'my-save-if-bufferfilename)
#+end_src

#+begin_src emacs-lisp
  (setq auto-save-default t  ;; let's try autosave for a while
        backup-inhibited t
        confirm-nonexistent-file-or-buffer nil
        create-lockfiles nil)
#+end_src
** COMMENT frames-only-mode
let my window manager handle screen creation
#+begin_src emacs-lisp :tangle no
  (use-package frames-only-mode
    :config (setq frames-only-mode nil))
#+end_src
** default-text-scale
use C-M-= and C-M-- to increase/decrease font size globally.
#+begin_src emacs-lisp
  (use-package default-text-scale
    :config (setq default-text-scale-mode t))
#+end_src
** play nice with parentheses
#+begin_src emacs-lisp
  (electric-pair-mode 1) ; auto-insert matching bracket
  (show-paren-mode 1)    ; turn on paren match highlighting
#+end_src
*** smartparens
insert matching parentheses and jump across them
#+begin_src emacs-lisp
  (use-package smartparens
    :hook ((prog-mode markdown-mode org-mode) . turn-on-smartparens-strict-mode)
    :config (show-smartparens-global-mode t))
#+end_src
*** evil-smartparens
#+begin_src emacs-lisp
  (use-package evil-smartparens
    :after evil
    :hook ((prog-mode markdown-mode org-mode) . evil-smartparens-mode))
#+end_src
* browsing the documentation
** helpful
beautiful help functions
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
    (use-package helpful
       :commands (helpful-callable helpful-function helpful-variable helpful-mode))
#+end_src
** demos
Insert demos after describe function https://github.com/xuchunyang/elisp-demos
#+begin_src emacs-lisp
  (use-package elisp-demos
    :after helpful
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
* change appearance
** line spacing, underline
#+begin_src emacs-lisp
  (setq-default line-spacing 0)
  (setq x-underline-at-descent-line t)
#+end_src
** rainbow-delimiters
matching parenthesis are highlighted with rainbow colours.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    :hook ((prog-mode LaTeX-mode) . rainbow-delimiters-mode))
#+end_src
** set the theme
*** COMMENT clean up previous theme
from this [[https://explog.in/dot/emacs/config.html][config]] from [[https://www.reddit.com/r/emacs/comments/4mzynd/what_emacs_theme_are_you_currently_using/d43c5cw][reddit]]
#+begin_src emacs-lisp
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
#+end_src
*** prot's modus themes
#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    (setq modus-themes-bold-constructs t
          modus-themes-slanted-constructs t
          modus-themes-faint-syntax t
          modus-themes-prompts 'subtle
          modus-themes-mode-line nil
          modus-themes-completions 'opinionated
          modus-themes-fringes nil
          modus-themes-intense-hl-line t
          modus-themes-intense-paren-match t
          modus-themes-diffs nil
          modus-themes-org-blocks 'rainbow
          modus-themes-headings nil
          modus-themes-scale-headings t
          modus-themes-variable-pitch-headings t)
    :defer)
#+end_src
*** circadian: dark theme at night, light theme during the day
#+begin_src emacs-lisp
  (use-package circadian
    :ensure t
    :config
    (setq calendar-latitude 52.08)
    (setq calendar-longitude 5.11)
    (setq circadian-themes '((:sunrise . modus-operandi)
                             (:sunset  . modus-vivendi)))
    (circadian-setup))
#+end_src
** set variable font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Iosevka" :height 120)
  (set-face-attribute 'variable-pitch nil :family "Tex Gyre Pagella" :height 1.0)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 1.0)
#+end_src
** rainbow-mode
Highlight hex colours!
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :defer t
    :hook ((html-mode r-mode) . rainbow-mode))
#+end_src
** pulse
Highlight the current line when changing focus. It's like beacon-mode but native!
from https://karthinks.com/software/batteries-included-with-emacs/
#+begin_src emacs-lisp
  (defun pulse-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

  (dolist (command '(scroll-up-command scroll-down-command
                     recenter-top-bottom other-window))
    (advice-add command :after #'pulse-line))
#+end_src
** visual-fill-column-mode
This allows me to write nicely on a widescreen monitor in a single buffer.
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (visual-line-mode . visual-fill-column-mode)
    :config
    (setq-default visual-fill-column-width 115
                  split-window-preferred-function 'visual-fill-column-split-window-sensibly
                  visual-fill-column-center-text t))
#+end_src
* version control
** diff-hl
Highlight diffs of current version-controlled buffer in the margin. Quite cool!
#+begin_src emacs-lisp
  (use-package diff-hl
    :init
    (global-diff-hl-mode)
    (setq diff-hl-gutter-mode t)
    (diff-hl-flydiff-mode +1)
    :hook (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src
** magit
git porcelain, essential!
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :after with-editor
    :bind
    ("M-g" . magit-status))
#+end_src
* custom functions/keyboard shortcuts
** revert buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src
** fetch calendar
#+begin_src emacs-lisp
  (defun fetch-calendar ()
    (when (internet-up-p) (org-gcal-fetch)))
#+end_src
** org-agenda recent open loops
#+begin_src emacs-lisp
  (defun my-org-agenda-recent-open-loops ()
    (interactive)
    (let ((org-agenda-start-with-log-mode t)
          (org-agenda-use-time-grid nil))
      (fetch-calendar)
      (org-agenda-list nil (org-read-date nil nil "-2d") 4)
      (beginend-org-agenda-mode-goto-beginning)))
#+end_src
** COMMENT edit heading in indirect buffer
[[https://www.reddit.com/r/orgmode/comments/fuvdqv/org_notetaking_workflow_with_orgroam/fmhl3ml?utm_source=share&utm_medium=web2x][taken from this reddit thread by alphapapa]]
I haven't used this at all.
#+begin_src emacs-lisp
  (defun ap/org-tree-to-indirect-buffer (&optional arg)
    "Create indirect buffer and narrow it to current subtree.
  The buffer is named after the subtree heading, with the filename
  appended.  If a buffer by that name already exists, it is
  selected instead of creating a new buffer."
    (interactive "P")
    (let* ((new-buffer-p)
           (pos (point))
           (buffer-name (let* ((heading (org-get-heading t t))
                               (level (org-outline-level))
                               (face (intern (concat "outline-" (number-to-string level))))
                               (heading-string (propertize (org-link-display-format heading)
                                                           'face face)))
                          (concat heading-string "::" (buffer-name))))
           (new-buffer (or (get-buffer buffer-name)
                           (prog1 (condition-case nil
                                      (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                    (error (make-indirect-buffer (current-buffer) buffer-name)))
                             (setq new-buffer-p t)))))
      (switch-to-buffer new-buffer)
      (when new-buffer-p
        ;; I don't understand why setting the point again is necessary, but it is.
        (goto-char pos)
        (rename-buffer buffer-name)
        (org-narrow-to-subtree))))

  (advice-add 'org-tree-to-indirect-buffer :override 'ap/org-tree-to-indirect-buffer)
#+end_src
** get-labels in current buffer
from [[https://kitchingroup.cheme.cmu.edu/blog/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links/][JKitchin's blog]]
#+begin_src emacs-lisp
  (defun get-labels ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((matches '()))
        (while (re-search-forward "label:\\([a-zA-z0-9:-]*\\)" (point-max) t)
          (add-to-list 'matches (match-string-no-properties 1) t))
        matches)))
#+end_src

this allows the yasnippet template to autocomplete ref: with all the labels in
the buffer.
** make-capture-frame
If we call make-capture-frame from anywhere, it creates a new frame named
capture which I can decorate using my window manager, and which disappears
after the capturing is complete.

Sources:
- [[https://lists.gnu.org/archive/html/emacs-orgmode/2013-10/msg00150.html][an old mailing list answer]]
- this blog: https://www.diegoberrocal.com/blog/2015/08/19/org-protocol/
- this more recent blog: https://fuco1.github.io/2017-09-02-Maximize-the-org-capture-buffer.html
- this very nice implementation: [[https://gist.github.com/progfolio/af627354f87542879de3ddc30a31adc1][Emacs as an Org capture server]]

#+begin_src emacs-lisp
  (defun make-capture-frame ()
    "Create a new frame and org-capture."
    (interactive)
    ;; (require 'cl-lib)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
              (condition-case err
                  (org-capture nil "x")
                (user-error (when (string= (cadr err) "Abort")
                              (delete-frame))))))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advice capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
#+end_src
** play bell sound when task is marked as done
from [[https://stackoverflow.com/questions/15345614/how-to-get-emacs-org-mode-to-play-sound-file-on-done-state][this stackoverflow post]]
#+begin_src emacs-lisp
  (add-hook 'org-after-todo-state-change-hook 'my-org-after-todo-state-change)
  (defun my-org-after-todo-state-change ()
    (when (or (string-equal org-state "DONE")
              (string-equal org-state "CANC"))
      (org-clock-out-if-current)
      (play-sound-file "~/bell.au")))
#+end_src
* internet stuffs
** internet up
#+begin_src emacs-lisp
  (defun internet-up-p (&optional host)
    (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                       (if host host "www.google.com"))))
#+end_src

** firefox as default browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")
#+end_src
* evil
Evil allows me to use vi(m) keybindings in emacs.
** evil
vim emulator
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ;; (setq evil-cross-lines t)
    ;; (setq evil-want-C-u-scroll t) ; C-u scrolls up half page
    :config
    (evil-mode 1))
#+end_src
** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** evil-org
https://github.com/Somelauw/evil-org-mode
evil keymap for org-mode
#+begin_src emacs-lisp
    (use-package evil-org
      :after (:any org evil)
      :diminish evil-org-mode
      :hook (((org-mode org-agenda-mode). evil-org-mode)
             (evil-org-mode . (lambda ()
                                (evil-org-set-key-theme
                                 '(textobjects insert navigation
                                               additional
                                               shift
                                               todo heading))))
             ;; I want to immediately type when I capture or log
             (org-log-buffer-setup . evil-insert-state)
             (org-capture-mode . evil-insert-state)
             (yas-before-expand-snippet . evil-insert-state))
      :config
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)
      ;; TODO: rewrite to :bind syntax?
      (evil-define-key 'motion 'org-agenda-mode-map (kbd "[") 'org-agenda-earlier)
      (evil-define-key 'motion 'org-agenda-mode-map (kbd "]") 'org-agenda-later)
      )
#+end_src
** evil-commentary
https://github.com/linktohack/evil-commentary
comment/uncomment with gc
#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src
** evil-magit
evil keybindings for magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :after (magit evil)
    :hook
    (git-commit-mode . evil-insert-state)
    (magit-mode . turn-off-evil-snipe-override-mode)
    :config
    (evil-set-initial-state 'magit-log-edit-mode 'insert))
#+end_src
* org-mode
** my gtd and inbox files finding functions
org-in-file and org-gtd-file are defined in emacsdirs.el (private file).
#+begin_src emacs-lisp
  ;; TODO: figure out how to do this in a less stupid way
  (defun open-gtd-file ()
    "Open the GTD file."
    (interactive)
    (find-file org-gtd-file))
  (defun open-inbox-file ()
    "Open the inbox file."
    (interactive)
    (find-file org-in-file))
  (defun open-clumped-file ()
     "Open the clumped file."
     (interactive)
     (find-file org-clumped-file))
  #+end_src
** setup
#+begin_src emacs-lisp
  ;; get latest org-mode from other repo than elpa
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (use-package org
    :pin org
    :diminish org-indent-mode
    :ensure org-plus-contrib
#+end_src
** keybindings
#+begin_src emacs-lisp
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c g" . open-gtd-file)
   ("C-c i" . open-inbox-file)
   ("C-c t" . open-clumped-file)
   ("C-c !" . org-time-stamp-inactive))
#+end_src
** hook
#+begin_src emacs-lisp
  :hook ((org-mode . visual-line-mode)
         (before-save . zp/org-set-last-modified)
         (org-capture-prepare-finalize . zp/org-capture-set-created-property))
#+end_src
** basics
#+begin_src emacs-lisp
  :config
  (setq org-ctrl-k-protect-subtree t)
  (setq org-return-follows-link t)
  ;; (setf org-special-ctrl-a/e t) ; I use evil's 0 and $ anyway
  ;; folded drawers no longer ruin new entries
  (setq org-M-RET-may-split-line '((default . nil)))
  (setq org-display-remote-inline-images 'cache
        org-startup-with-inline-images t)
#+end_src
** clocking/logging
#+begin_src emacs-lisp
  (setq org-check-running-clock t
        org-log-note-clock-out t
        org-log-done 'time
        org-log-into-drawer t
        ;; org-clock-auto-clockout-timer (* 10 60)
        )
#+end_src
** theming
#+begin_src emacs-lisp
  (setf org-tags-column -65)
  (setq org-startup-indented t
        org-startup-folded 'content
        org-agenda-block-separator ""
        org-fontify-emphasized-text t
        ;; org-fontify-todo-headline t ;; might be nice, but needs customisation of org-headline-todo face
        org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-pretty-entities nil
        org-ellipsis "…" ;▼ … ◦
        org-hide-emphasis-markers t)
#+end_src
*** org-superstar-mode
https://github.com/integral-dw/org-superstar-mode

Here are some symbol options for my various todo-states
NEXT: ☐
DONE: ☑🗹
TICK: →🗓📅📆
WAIT: ☕…
SOME: ☁⛅⛈🌤🌧🌥🌪⛱☼
CANC: ❌☒✗⮽🗳🗵🗷✘╳❌

see e.g. https://emojipedia.org/calendar/ for emoji!

#+begin_src emacs-lisp
  (use-package org-superstar
    :hook
    (org-mode . (lambda () (org-superstar-mode 1)))
    :config
    (setq org-superstar-headline-bullets-list
          '("◉" "●" "○" "♦" "◆" "►" "▸"))
    (setq org-superstar-todo-bullet-alist '(("NEXT" " ☐" ?☐)
                                            ("TICK" " 🗓" ?🗓)
                                            ("WAIT" " …" ?…)
                                            ("SOME" " ☼" ?☼)
                                            ("DONE" " ☑" ?☑)
                                            ("CANC" " ❌" ?❌)))
    (setq org-superstar-special-todo-items t))
#+end_src

** file associations
#+begin_src emacs-lisp
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.x?html?\\'" . "xdg-open %s")
          ("\\.pdf\\'" . (lambda (file link)
                           (org-pdfview-open link)))
          ("\\.mp4\\'" . "xdg-open %s")
          ("\\.webm\\'" . "xdg-open %s")
          ("\\.mkv\\'" . "xdg-open %s")
          ("\\.pdf.xoj\\'" . "xournal %s")))
#+end_src

** org-protocol
#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src

** COMMENT org-yt
use it to display youtube image previews and other online image previews
https://emacs.stackexchange.com/questions/42281/org-mode-is-it-possible-to-display-online-images
#+begin_src emacs-lisp
  (use-package org-yt
    :straight (org-yt :type git :host github :repo "TobiasZawada/org-yt")
    :config
    (defun org-image-link (protocol link _description)
      "Interpret LINK as base64-encoded image data."
      (cl-assert (string-match "\\`img" protocol) nil
                 "Expected protocol type starting with img")
      (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
        (cl-assert buf nil
                   "Download of image \"%s\" failed." link)
        (with-current-buffer buf
          (goto-char (point-min))
          (re-search-forward "\r?\n\r?\n")
          (buffer-substring-no-properties (point) (point-max)))))

    (org-link-set-parameters
     "imghttp"
     :image-data-fun #'org-image-link)

    (org-link-set-parameters
     "imghttps"
     :image-data-fun #'org-image-link))
#+end_src
** GTD stuff
*** org-agenda
#+begin_src emacs-lisp
  ;; (setq org-agenda-files (list "<file1.org> etc."))
  (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
  (setq org-deadline-warning-days 14)
  ;; exclude scheduled items from all todo's in list
  (setq org-agenda-todo-ignore-scheduled t)
  ;; (setq org-agenda-todo-ignore-deadlines t)
  ;; (setq org-agenda-todo-ignore-timestamp t)
  ;; (setq org-agenda-todo-ignore-with-date t)
  ;;(setq org-agenda-prefix-format "  %-17:c%?-12t% s") ; TODO: see if I like the default
  (setq org-agenda-include-all-todo nil)
#+end_src
*** agenda files
all the org-files in my org-directory
#+begin_src emacs-lisp
  ;(setq org-directory "~/org/") ;; changed for org-roam capture
  (setq org-agenda-files (append
                          (directory-files-recursively "~/org" "\\.org$")
                          (directory-files-recursively "~/SurfDrive/bibliography/notes/daily" "\\.org$")))
#+end_src
*** refile targets
swyper makes refiling amazing!
#+begin_src emacs-lisp
  (setq org-refile-targets (quote ((nil :maxlevel . 9)  ;; current file
                                   (org-gtd-file :maxlevel . 3)
                                   (org-tickler-file :maxlevel . 2)
                                   (org-notes-file :maxlevel . 2)
                                   (org-lists-file :maxlevel . 2)
                                   (org-someday-file :maxlevel . 2)
                                   (org-clumped-file :maxlevel . 4))))
  (setq org-outline-path-complete-in-steps nil)   ;; Refile in a single go
  (setq org-refile-use-outline-path t)            ;; Show full paths for refiling
#+end_src
*** agenda filters
Filter tasks by context (sorted by todo state)
#+begin_src emacs-lisp
  (setq org-agenda-sorting-strategy
        '((agenda habit-down time-up priority-down todo-state-up category-keep)
          (todo todo-state-up priority-down category-keep)
          (tags priority-down todo-state-up category-keep)
          (search category-keep)))
  (setq org-agenda-custom-commands
        '(("i" "Inbox" tags "in")
          ("I" "Important"
           ((tags "PRIORITY=\"A\"/PROJ"
                  ((org-agenda-overriding-header "High-priority projects:")))
            (tags "PRIORITY=\"A\"/!-PROJ"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))))
          ("A" agenda*)
          ("n" "Next Actions" todo "NEXT")
          ("w" "Waiting" todo "WAIT")
          ;; ("s" "Someday/Maybe" todo "SOME")
          ("j" "Projects" tags "prj/-SOME-DONE-CANC")
          ("W" "Work" tags-todo "-Personal/!-WAIT"
           ((org-agenda-todo-ignore-scheduled t)))
          ("P" "Personal" tags-todo "-Work/!-WAIT"
           ((org-agenda-todo-ignore-scheduled t)))
          ("g" . "GTD contexts")
          ("gh" "Home" tags-todo "@home")
          ("gk" "Klusjes/Craft" tags-todo "@klusje")
          ("go" "Office" tags-todo "@office")
          ("ge" "Errands" tags-todo "@errands")
          ("gl" "Laboratory" tags-todo "@lab")
          ;; ("gt" "Travel" tags-todo "@travel")
          ("gt" "Teams" tags-todo "@teams")
          ("gc" "Computer" tags-todo "@computer")
          ("gB" "Phone" tags-todo "@phone")
          ("gm" "e-mail" tags-todo "@email")
          ("gb" "Bank" tags-todo "@bank")
          ("gw" "Write" tags-todo "@write")
          ("gp" "Program" tags-todo "@program")
          ("gC" "Create/Plot" tags-todo "@createplot")
          ("gr" "Read" tags-todo "@read")
          ("gg" "Research" tags-todo "@research")
          ("gs" "Schedule" tags-todo "@schedule")
          ("ga" "Agenda" tags-todo "@agenda")
          ("E" . "Energy")
          ("Ef" "Focus" tags-todo "@focus")
          ("Ed" "Braindead" tags-todo "@braindead")
          ("p" . "People")
          ("pm" "Martin" tags-todo "Martin")
          ("pl" "Luc" tags-todo "Luc")
          ("pa" "Anne" tags-todo "Anne")
          ("pf" "FEST" tags-todo "FEST")
          ("pi" "Inigo" tags-todo "Inigo")))
#+end_src
*** display PROPERTIES in agenda
#+begin_src emacs-lisp
  (use-package org-agenda-property
    :config
    (setq org-agenda-property-list '("DELEGATED_TO"))
    (setq org-agenda-property-position 'next-line))
#+end_src
*** stuck projects
#+begin_src emacs-lisp
  (setq org-tags-exclude-from-inheritance '("prj")
        org-stuck-projects '("+prj/-CANC-SOME-DONE"
                             ("NEXT" "WAIT" "TICK") ()))  ;;  "SOME"
#+end_src
*** capture templates
customize capture templates
 #+begin_src emacs-lisp
   (setq org-capture-templates
         '(;("a" "Appointment" entry (file org-in-file)
           ; "* %?\n  %^T\n")
           ("t" "Todo" entry (file org-in-file)
            "* %?\n%a" :add-created t)
           ("x" "simple" entry (file org-in-file)
            "* %?" :add-created t)
           ("T" "Todo-nolink-tag" entry (file org-in-file)
            "* %? %^G\n" :add-created t)
           ("m" "Email" entry (file org-in-file)
            "* %? :@email:\n %i\n %a\n" :add-created t)
           ("w" "Website" entry (file org-in-file)
            "* %?\nEntered on %U\n %i\n %a")
           ("r" "Weekly Review" entry (file "~/org/log.org")
            (file "~/org/weekly_review.org") :clock-in t :clock-keep t)
           ("p" "Protocol" entry (file org-in-file)
            "* %:description%? :@web:\n[[%:link][%:description]]\n#+BEGIN_QUOTE\n%:initial\n#+END_QUOTE\n" :add-created t)
           ("L" "Protocol Link" entry (file org-in-file)
            "* %:description%? :@web:\n[[%:link][%:description]]" :add-created t)
           ("j" "Journal" entry (file+olp+datetree org-journal-file)
            "* %?\nEntered on %U\n %i\n %a")))
 #+end_src

 #+RESULTS:
 | t | Todo | entry | (file org-in-file) | * %? |

*** quick-capture
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c h")
  (lambda () (interactive) (org-capture nil "x")))
#+end_src
*** TODO states
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "WAIT(w!/!)" "TICK(t)" "SOME(s!/!)" "|"
                    "DONE(d)" "CANC(c)")))
  ;; prettify the todo keywords
  (setq org-todo-keyword-faces
        '(("NEXT" . (:family "Iosevka" :foreground "light goldenrod yellow" :background "red" :weight bold))
          ("WAIT" . (:family "Iosevka" :foreground "dim gray" :background "yellow"))
          ("TICK" . (:family "Iosevka" :background "light slate blue"))
          ("SOME" . (:family "Iosevka" :foreground "ghost white"  :background "deep sky blue"))
          ("DONE" . (:family "Iosevka" :foreground "green4"       :background "pale green"))
          ("CANC" . (:family "Iosevka" :foreground "dim gray"     :background "gray"))))
#+end_src
*** effort estimates
#+begin_src emacs-lisp
  (add-to-list 'org-global-properties
               '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
#+end_src
*** habits
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit t)
#+end_src
*** context tags
#+begin_src emacs-lisp
  (setq org-fast-tag-selection-single-key t)
  (setq org-tag-alist '(("prj" . ?j)
                        (:startgroup . nil)
                        ("@home" . ?h)
                        ("@office" . ?o)
                        ("@errands" . ?e)
                        ("@lab" . ?l)
                        (:endgroup . nil)
                        ("@computer" . ?c)  ;; general in case I can't decide
                        ("@klusje" . ?k)    ;; crafts, things that require my toolbox
                        ("@phone" . ?B)     ;; b for Dutch "bellen"
                        ("@email" . ?m)
                        ("@teams" . ?t)
                        ("@bank" . ?b)      ;; I need my little reader thingie
                        ("@write" . ?w)
                        ("@program" . ?p)
                        ("@createplot" . ?C)
                        ("@read" . ?r)
                        ("@research" . ?g)
                        ("@schedule" . ?s)
                        ("@agenda" . ?a)    ;; things to discuss
                        ;; ("@admin" . ??) ;; do I want admin? which key should it use?
                        (:startgroup . nil)
                        ("@focus" . ?f)
                        ("@braindead" . ?d)
                        (:endgroup . nil)
                        (:startgroup . nil)
                        ("Work" . ?W) ("Personal" . ?P)
                        (:endgroup . nil)
                        ;; tags to accompany the @agenda context
                        ("Family" . ?F) ("Martin" . ?M) ("Luc" . ?L) ("Inigo" . ?I) ("Niels" . ?N)))
#+end_src
** exporting
*** org-babel languages
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (python . t)
     (latex . t)
     (shell . t)
     (stan . t)
     (latex . t)
     (R . t)))
#+end_src
*** org-export odt
#+begin_src emacs-lisp
  (require 'ob-org)
#+end_src
*** ox-extra
org-export ignore headlines with ~:ignore:~ tag
#+begin_src emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
#+end_src
*** ox-latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src
*** org-latex export settings
basic latex settings
#+begin_src emacs-lisp
  (setq org-highlight-latex-and-related '(native script entities))
  (setq org-preview-latex-default-program 'imagemagick)
  ;; (setq org-latex-default-figure-position 'htbp)
  (setq org-latex-pdf-process
        (list "latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode -output-directory %o' -f -pdf %f"))
  (setq org-latex-prefer-user-labels t)
  (customize-set-value 'org-latex-hyperref-template "
  \\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},
   pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true}\n")
#+end_src
*** org-entities-user
These are nice shorthands for commands I use often. In org-source they look
nice, and they export to both \LaTeX and =html= correctly. Note that
unfortunately, special entity names cannot contain numerics, so =\d18O= is not
possible.
#+begin_src emacs-lisp
  (setq org-entities-user
        '(("celsius" "\\(^{\\circ}\\)C" nil "&deg;C" "°C" "°C" "℃")
          ("minus" "\\-" t "&minus;" "-" "-" "−")  ;; defaults to =\\minus= in LaTeX, which doesn't work.
          ("permil" "\\textperthousand{}" nil "&permil;" "per thousand" "per thousand" "‰")  ;; exactly the same as in org-entities
          ("us" "\\," nil "&nbsp;" " " " " " ")
          ("appr" "\\sim" t "&tilde;" "~" "~" "~")
          ;; for gps-coordinates
          ("degree" "^{\\circ}" t "&deg;" "°" "°" "°")
          ("arcminute" "^{'}" t "&prime;" "'" "′" "′")
          ("arcsecond" "^{''}" t "&Prime;" "\"" "″" "″")))
#+end_src
*** latejx class =ijkarticle=
#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
         '("ijkarticle"
  "\\documentclass{article}
  \\usepackage[citestyle=authoryear,bibstyle=authoryear,hyperref=true,maxcitenames=3,url=true,backend=biber,natbib=true]{biblatex}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
*** org source code block settings
[[https://emacs.stackexchange.com/a/47370/9748][Nice answer on how to have point on a blank line in code block]]
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
               '("se" . "src emacs-lisp
  "))
  ;; TODO figure out how to add multiple items to the list
  (add-to-list 'org-structure-template-alist
               '("sr" . "src R
  "))
#+end_src
** close use-package org
#+begin_src emacs-lisp
  )
#+end_src
** ob-async
allow asyncronous code block evaluation https://github.com/astahlman/ob-async
#+begin_src emacs-lisp
  (use-package ob-async
    :after org)
#+end_src
** org-pomodoro
got the function from this [[https://github.com/marcinkoziej/org-pomodoro/issues/89#issuecomment-701025952][github issue]]
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org
    :bind ("C-c p" . org-pomodoro)
    :hook (org-pomodoro-break-finished-hook . org-pomodoro-prompt)
    :config
    (setq org-pomodoro-manual-break t)
    (defun org-pomodoro-prompt ()
      (interactive)
      (org-clock-goto)
      (if (y-or-n-p "Start a new pomodoro?")
          (progn
            (org-pomodoro))))
    )
#+end_src
** org-pdfview
#+begin_src emacs-lisp
  (use-package org-pdfview
    :after (org pdf-tools))
#+end_src
** COMMENT view inline pdfs?
doesn't work :(
#+begin_src emacs-lisp
  (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "pdf")
  (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
  (setq org-image-actual-width 600)
#+end_src
** org-beamer
#+begin_src emacs-lisp
  (use-package ox-latex
    :after org
    :ensure nil
    :config
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass\[presentation\]\{beamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
#+end_src
** deft
:LOGBOOK:
- Note taken on [2020-07-15 Wed 16:09] \\
  added it based on [[file:~/SurfDrive/bibliography/notes//20200715160129-an_orgmode_note_workflow.org][An Orgmode Note Workflow]]
:END:
#+begin_src emacs-lisp :eval never :tangle no
  (use-package deft
    :commands deft
    :bind ("C-c d" . deft)
    :init
    (setq deft-default-extension "org"
          ;; de-couples filename and note title:
          deft-use-filename-as-title nil
          deft-use-filter-string-for-filename t
          ;; disable auto-save
          deft-auto-save-interval -1.0
          ;; converts the filter string into a readable file-name using kebab-case:
          deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)))
    :config
    (add-to-list 'deft-extensions "tex"))
#+end_src

** COMMENT mpv
play videos from orgmode!
#+begin_src emacs-lisp
  (use-package mpv
    :hook
    (org-open-at-point-functions . mpv-seek-to-position-at-point)
    :config
    (org-add-link-type "mpv" #'mpv-play)
    (defun org-mpv-complete-link (&optional arg)
      (replace-regexp-in-string
       "file:" "mpv:"
       (org-file-complete-link arg)
       t t)))
#+end_src
it's not working so far

** COMMENT pdf preview in org
#+begin_src emacs-lisp :eval never :tangle no
  ; (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  ; (add-to-list 'image-file-name-extensions "pdf")
  ; (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit)
  ;       org-image-actual-width t)
#+end_src

* presenting
** org-tree-slide-mode
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :after org
    :bind (:map org-mode-map ("<f9>" . org-tree-slide-mode)))
#+end_src

* writing
** COMMENT spell-fu
#+begin_src emacs-lisp
  (use-package spell-fu
    :hook (org-mode . (lambda()
                        (setq spell-fu-faces-exclude
                              '(org-meta-line org-link org-code))
                        (spell-fu-mode))))
#+end_src
** easy symbol insertion
By default C-x 8 o = ° and C-x 8 m = µ. So:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 8 a") (lambda () (interactive) (insert "α")))
  (global-set-key (kbd "C-x 8 b") (lambda () (interactive) (insert "β")))
  (global-set-key (kbd "C-x 8 d") (lambda () (interactive) (insert "δ")))
  (global-set-key (kbd "C-x 8 D") (lambda () (interactive) (insert "Δ")))
#+end_src
I also use compose-key, mapped to right alt with some custom settings for
<ralt> g d, resulting in δ, for example.
** all-the-icons
https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (setq inhibit-compacting-font-caches t)
#+end_src
*** all-the-icons-ivy
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy
    :after (ivy all-the-icons)
    :config
    (all-the-icons-ivy-setup))
#+end_src
*** all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after (dired all-the-icons)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** COMMENT emojify-mode
#+begin_src emacs-lisp
  (use-package emojify
    :config (setq emojify-emoji-styles 'unicode)
    :hook ((mu4e-mode mu4e-view-mode mu4e-compse-mode org-mode) . emojify-mode))
#+end_src
** yasnippet
usefull snippets for me: org-mode (fig_, )
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    :diminish yas-mode
    :config
    (require 'warnings)
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
    (setq yas-indent-line t))
#+end_src
** ispell: spell-checking
#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setq ispell-dictionary "british-ize-w_accents"))
#+end_src
** flyspell
#+begin_src emacs-lisp
  (use-package flyspell
    :hook ((text-mode-hook . flyspell-mode)
           (prog-mode-hook . flyspell-prog-mode))
    :config
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_example " . "#\\+end_example$"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXAMPLE " . "#\\+END_EXAMPLE$")))
#+end_src
** org-ref
https://github.com/jkitchin/org-ref/blob/master/org-ref.org
#+begin_src emacs-lisp
  (use-package org-ref
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite
          org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
          reftex-default-bibliography '("~/SurfDrive/bibliography/references.bib")
          org-ref-bibliography-notes '("~/SurfDrive/bibliography/notes/notes.org")
          org-ref-default-bibliography '("~/SurfDrive/bibliography/references.bib")
          org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
          org-ref-notes-directory "~/SurfDrive/bibliography/notes/"
          org-ref-notes-function 'orb-edit-notes
          ;; org-ref-pdf-directory '("~/SurfDrive/bibliography/bibtex-pdfs/")
          bibtex-completion-pdf-open-function 'org-open-file)
    :bind
    (:map org-mode-map ("C-c ]" . org-ref-ivy-insert-cite-link))
    :config
    (require 'org-ref)
    ;; (require 'doi-utils)
    ;; (require 'org-id)
    ;; (require 'org-ref-wos)
    ;; (require 'org-ref-scopus)
    ;; (require 'org-ref-pubmed)
    ;; (require 'org-ref-sci-id)
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator "-"
          bibtex-autokey-titleword-separator "-"
          bibtex-autokey-titlewords 0
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5))
#+end_src
*** open zotero pdf at point
from [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#a-note-for-mendeley-jabref-and-zotero-users][the manual]]
#+begin_src emacs-lisp
  (setq bibtex-completion-pdf-field "file")

  (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
      (key (car results))
      (pdf-file (car (bibtex-completion-find-pdf-in-field key))))
      (if (file-exists-p pdf-file)
         (org-open-file pdf-file)
        (message "No PDF found for %s" key))))

  (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
  ;; (setq org-ref-get-pdf-filename-function 'bibtex-completion-find-pdf-in-field)

  (global-set-key (kbd "<f8>") 'my/org-ref-open-pdf-at-point)
#+end_src
* COMMENT navigation
** COMMENT beginend
#+begin_src emacs-lisp
  (use-package beginend
    :init
    (beginend-global-mode))
#+end_src

** COMMENT evil-easymotion
Link evil forward commands etc. to avy jump previews so you can jump down 10
lines if you forgot to press 10j. https://github.com/PythonNut/evil-easymotion/
#+begin_src emacs-lisp
  (use-package evil-easymotion
    :config
    (evilem-default-keybindings "SPC"))
#+end_src
** COMMENT evil-snipe
https://github.com/hlissner/evil-snipe
#+begin_src emacs-lisp
  (use-package evil-snipe
    :diminish evil-snipe-mode
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1))
#+end_src
* note-taking
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :load-path "/usr/share/emacs/site-lisp/pdf-tools"
    :init
    (pdf-tools-install)
    :config
    ;(pdf-loader-install)
    (setq-default pdf-view-display-size 'fit-width)
    :bind
    ;; swiper doesn't play nice with pdf-tools, so I disable it.
    (:map pdf-view-mode-map ("C-s" . isearch-forward)))
#+end_src
** org-noter
https://github.com/weirdNox/org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :after (:any org pdf-view)
    :bind ((:map org-mode-map ("C-c o" . org-noter))
           (:map org-noter-notes-mode-map
                 ("C-c k" . org-noter-create-skeleton)
                 ("C-c q" . org-noter-kill-session)))
    :config
    (setq
     ;; org-noter-notes-window-location 'horizontal-split
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     org-noter-notes-search-path (list org_notes)))
#+end_src
*** org-noter-insert-precice-note-dwim---stolen from zaeph
https://github.com/zaeph/.emacs.d/blob/master/init.el#L4420
#+begin_src emacs-lisp
    (defun zp/org-noter-insert-precise-note-dwim (force-mouse)
      "Insert note associated with a specific location.
  If in nov-mode, use point rather than the mouse to target the
  position."
      (interactive "P")
      (if (and (derived-mode-p 'nov-mode)
               (not force-mouse))
          (let ((pos (if (region-active-p)
                         (min (region-beginning) (point))
                       (point))))
            (org-noter-insert-note pos))
        (org-noter-insert-precise-note)))
#+end_src

** org-roam
[[https://org-roam.readthedocs.io/en/latest/installation/][docs here]]
[[file:~/SurfDrive/bibliography/notes//20200427230825-how_to_take_smart_notes.org][How to Take Smart Notes]]

#+begin_src emacs-lisp
  (use-package org-roam
    :hook (after-init-hook . org-roam-mode)
    :commands (org-roam-buffer-toggle-display
               org-roam-find-file
               org-roam-graph
               org-roam-insert
               org-roam-switch-to-buffer
               org-roam-dailies-date
               org-roam-dailies-today
               org-roam-dailies-tomorrow
               org-roam-dailies-yesterday)
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n d" . org-roam-dailies-capture-today)
                 ("C-c n g" . org-roam-graph)
                 :map evil-normal-state-map
                 ("g[" . org-roam-dailies-find-previous-note)
                 ("g]" . org-roam-dailies-find-next-note)
                 ;; ("g." . org-roam-dailies-find-today) ;; these don't work
                 ;; ("g/" . org-roam-dailies-find-today)
                 )
                :map org-mode-map
                (("C-c n i" . org-roam-insert)))
    :config
    (require 'org-roam-capture)
    (setq org-roam-verbose nil  ; https://youtu.be/fn4jIlFwuLU
          org-roam-buffer-no-delete-other-windows t ; make org-roam buffer sticky
          org-roam-capture-templates '(("d" "default" plain #'org-roam-capture--get-point "%?"
                                        :file-name "%<%Y%m%d%H%M%S>-${slug}"
                                        :head "#+title: ${title}\n#+created: %U\n#+last_modified:\n#+roam_tags:\n\n"
                                        :unnarrowed t))
          org-roam-dailies-capture-templates
          '(("d" "default" entry #'org-roam-capture--get-point
             "* %?"
             :add-created t
             :file-name "daily/%<%Y-%m-%d>"
             :head "#+title: %<%Y-%m-%d>\n#+created: %u\n#+last_modified: %U\n#+roam_tags: dailies\n\n"))))
#+end_src
** org-roam-create-note-from-headline
https://org-roam.discourse.group/t/creating-an-org-roam-note-from-an-existing-headline/978
#+begin_src emacs-lisp
  (defun org-roam-create-note-from-headline ()
    "Create an Org-roam note from the current headline and jump to it.

  Normally, insert the headline’s title using the ’#title:’ file-level property
  and delete the Org-mode headline. However, if the current headline has a
  Org-mode properties drawer already, keep the headline and don’t insert
  ‘#+title:'. Org-roam can extract the title from both kinds of notes, but using
  ‘#+title:’ is a bit cleaner for a short note, which Org-roam encourages."
    (interactive)
    (let ((title (nth 4 (org-heading-components)))
          (has-properties (org-get-property-block)))
      (org-cut-subtree)
      (org-roam-find-file title nil nil 'no-confirm)
      (org-paste-subtree)
      (unless has-properties
        (kill-line)
        (while (outline-next-heading)
          (org-promote)))
      (goto-char (point-min))
      (when has-properties
        (kill-line)
        (kill-line))))
#+end_src

** zaeph's CREATED and LAST_MODIFIED properties
https://github.com/zaeph/.emacs.d/blob/master/lisp/zp-org.el#L140
#+begin_src emacs-lisp
  (defvar zp/org-created-property-name "CREATED"
      "The name of the org-mode property that stores the creation date of the entry")

  ;; TODO: Find the source for this because I’ve improved something which
  ;; already existed
  (defun zp/org-set-created-property (&optional active name)
    "Set a property on the entry giving the creation time.
  By default the property is called CREATED. If given, the ‘NAME’
  argument will be used instead. If the property already exists, it
  will not be modified.
  If the function sets CREATED, it returns its value."
    (interactive)
    (let* ((created (or name zp/org-created-property-name))
           (fmt (if active "<%s>" "[%s]"))
           (now (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))
      (unless (org-entry-get (point) created nil)
        (org-set-property created now)
        now)))
#+end_src

*** set it after capture
#+begin_src emacs-lisp
  (defun zp/org-capture-set-created-property ()
    "Conditionally set the CREATED property on captured trees."
    (let ((add-created (plist-get org-capture-plist :add-created))
          (type (plist-get org-capture-current-plist :type)))
      (when (and (not org-note-abort)
                 (eq type 'entry)
                 add-created)
        (unless (buffer-narrowed-p)
          (error "Cannot add CREATED when buffer is not narrowed"))
        (save-excursion
          (goto-char (point-min))
          (zp/org-set-created-property)))))
#+end_src

*** set time-file property
#+begin_src emacs-lisp
  (defun zp/org-set-time-file-property (property &optional anywhere pos)
    "Set the time file PROPERTY in the preamble.
  When ANYWHERE is non-nil, search beyond the preamble.
  If the position of the file PROPERTY has already been computed,
  it can be passed in POS."
    (when-let ((pos (or pos
                        (zp/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))
#+end_src

*** org-find-time-file-property
#+begin_src emacs-lisp
  (defun zp/org-find-time-file-property (property &optional anywhere)
    "Return the position of the time file PROPERTY if it exists.
  When ANYWHERE is non-nil, search beyond the preamble."
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading)
                                 t)
          (point)))))
#+end_src
*** org-has-time-file-property-p
#+begin_src emacs-lisp
  (defun zp/org-has-time-file-property-p (property &optional anywhere)
    "Return the position of time file PROPERTY if it is defined.
  As a special case, return -1 if the time file PROPERTY exists but
  is not defined."
    (when-let ((pos (zp/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos
          -1))))
#+end_src

*** set last modified
#+begin_src emacs-lisp
  (defun zp/org-set-last-modified ()
    "Update the LAST_MODIFIED file property in the preamble."
    (when (derived-mode-p 'org-mode)
      (zp/org-set-time-file-property "LAST_MODIFIED")))
#+end_src

** org-roam-bibtex
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after (org-roam)
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions)))
    :config
    (setq orb-preformat-keywords
          '("citekey" "title" "url" "author-or-editor" "keywords" "file")
          orb-process-file-field t
          orb-file-field-extensions "pdf")

    (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :add-created t
             :file-name "${citekey}"
             :head "#+title: ${citekey}: ${title}\n#+roam_key: ${ref}\n#+created: %u\n#+last_modified: %U#+roam_tags: articles\n

  - related ::
  - keywords :: ${keywords}

  ,* ${title}
  :PROPERTIES:
  :Custom_ID: ${citekey}
  :URL: ${url}
  :AUTHOR: ${author-or-editor}
  :NOTER_DOCUMENT: ${file}
  :NOTER_PAGE:
  :END:"))))
#+end_src
** company-org-roam
for auto-completion
#+begin_src emacs-lisp
  (use-package company-org-roam
    :ensure t
    :config
    (push 'company-org-roam company-backends))
#+end_src

** COMMENT org-roam-protocol
this bit errors out if I use-package it.

Since the org module lazy loads org-protocol (waits until an org URL is detected), we can safely chain `org-roam-protocol' to it.
#+begin_src emacs-lisp
  (require 'org-roam-protocol
      :after org-protocol)
#+end_src

** org-roam-server
https://github.com/org-roam/org-roam-server
#+begin_src emacs-lisp
   (use-package org-roam-server
     :bind (:map org-roam-mode-map
                 (("C-c n G" . org-roam-server-mode)))
     :config
     (setq org-roam-server-host "127.0.0.1"
           org-roam-server-port 8080
           org-roam-server-authenticate nil
           org-roam-server-export-inline-images t
           org-roam-server-serve-files nil
           org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
           org-roam-server-network-poll t
           org-roam-server-network-arrows nil
           org-roam-server-network-label-truncate t
           org-roam-server-network-label-truncate-length 60
           org-roam-server-network-label-wrap-length 20))
#+end_src
* swiper / ivy
very nice search replacement
#+begin_src emacs-lisp
  (use-package swiper
    :init (ivy-mode 1)
    :diminish ivy-mode
    :config
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) ")
    :bind
    ("\C-s" . swiper)
    ("C-c C-r" . ivy-resume)
    ("C-c v" . ivy-push-view)
    ("C-c V" . ivy-pop-view))
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :init (counsel-mode 1)
    :diminish counsel-mode
    :bind
    ("C-x l" . counsel-locate)
    ("C-c g" . counsel-git)
    ("M-x" . counsel-M-x)
    ("C-c s" . counsel-rg))
#+end_src
** link-hint
#+begin_src emacs-lisp
  (use-package link-hint
    :ensure t
    :defer t
    :bind ((:map evil-normal-state-map ("SPC f" . link-hint-open-link))))
;;(:map mu4e-view-mode-map ("f" . link-hint-open-link))
#+end_src
* system
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :defer t)
#+end_src
** systemd
#+begin_src emacs-lisp
  (use-package systemd
    :defer t)
#+end_src
** dired
#+begin_src emacs-lisp
  (use-package dired
    :commands dired
    :ensure nil
    :config
    (setq dired-listing-switches "-lh"))
#+end_src
** ranger
#+begin_src emacs-lisp
  (use-package ranger
    :defer t)
#+end_src
** emacs-pkgbuild-mode
Install it with Pacman
#+begin_src bash :results none :exports code :eval never
sudo pacman -S emacs-pkgbuild-mode
#+end_src

Then load it into emacs when opening a PKGBUILD file
#+begin_src emacs-lisp
  (use-package pkgbuild-mode
     :ensure nil
     :defer t
     :load-path "/usr/share/emacs/site-lisp/"
     :mode "/PKGBUILD$")
#+end_src
** COMMENT calendar
perhaps change keybindings a little: [[https://github.com/emacs-evil/evil-collection/issues/211][evil-collection issue]]
#+begin_src emacs-lisp
  (use-package calfw)
  (use-package calfw-org
    :config
    (setq cfw:display-calendar-holidays nil
          calendar-week-start 1)
    :bind
    ("C-c o" . cfw:open-org-calendar))
#+end_src
** company
See https://iqss.github.io/IQSS.emacs/init.html#auto-complete_configuration for where I got it from.
#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :diminish company-mode
    :config
    ;; (setq ;; company-require-match nil
          ;; company-async-timeout 6
          ;; company-idle-delay 0.25 ;; default 0.5,
          ;; company-minimum-prefix-length 2 ;; default 3
          ;; completion-ignore-case t
          ;; company-global-modes '(not term-mode))
    (require 'company-capf)
    (require 'company-files)
    (require 'company-math)
    (delete-dups (push 'company-math-symbols-unicode company-backends))
    (delete-dups (push 'company-capf company-backends))
    (delete-dups (push 'company-files company-backends))
    (setq tab-always-indent 'complete)
    :bind
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("<tab>" . company-complete-common)
          ("<backtab>" . company-select-previous))
    (:map company-mode-map
          ([remap indent-for-tab-command] . company-indent-or-complete-common)
          ("C-M-i" . company-complete)
          ("C-M-S-i" . counsel-company)))
#+end_src
* email
** smtp
#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :config
    (setq message-send-mail-function 'smtpmail-send-it
          send-mail-function 'smtpmail-send-it
          user-mail-address "<your-email-address>"
          smtpmail-default-smtp-server "<your-smtp-server>"
          smtpmail-smtp-server "<your-smtp-server>"
          smtpmail-smtp-service 587
          smtp-stream-type 'starttls
          smtpmail-smtp-user "<your-user-id>"
          smtpmail-starttls-credentials
          '(("<your-smtp-server>" 587 "<possibly-domain>/<your-user-id>" nil))
          starttls-use-gnutls t
          starttls-gnutls-program "gnutls-cli"
          starttls-extra-args nil))
#+end_src
** use oauth2ms
https://github.com/harishkrupo/oauth2ms/blob/main/steps.org
I have to use this repo to access my work's office365 account through XOAUTH2
#+begin_src emacs-lisp
  ;;; Call the oauth2ms program to fetch the authentication token
   (defun fetch-access-token ()
     (with-temp-buffer
	(call-process "/home/japhir/bin/oauth2ms" nil t nil "--encode-xoauth2")
	(buffer-string)))

   ;;; Add new authentication method for xoauth2
   (cl-defmethod smtpmail-try-auth-method
     (process (_mech (eql xoauth2)) user password)
     (let* ((access-token (fetch-access-token)))
	(smtpmail-command-or-throw
	 process
	 (concat "AUTH XOAUTH2 " access-token)
	 235)))

   ;;; Register the method
   (with-eval-after-load 'smtpmail
     (add-to-list 'smtpmail-auth-supported 'xoauth2))
#+end_src
** mu4e
install it with pacman ~mu~
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :commands mu4e
    :bind (("C-c m" . mu4e))
    :hook ((mu4e-view-mode mu4e-compose-mode). visual-fill-column-mode)
    :init
    (require 'mu4e)  ;; somehow this is needed, because otherwise calling org-store-link doesn't work
    (require 'org-mu4e)
    (setq mu4e-drafts-folder "/Drafts"
          mu4e-sent-folder "/Sent Items"
          mu4e-trash-folder "/Deleted Items")
    (setq mu4e-maildir-shortcuts
          '(("/inbox" . ?i)
            ;;("/NEXT" . ?n)
            ("/Waiting" . ?w)
            ("/Deleted Items" . ?d)
            ("/news" . ?n)
            ("/Important backlog" . ?l)
            ;("/Sent Items" . ?s)
            ("/Junk Email" . ?s)
            ("/archive" . ?r)))
    (setq mu4e-change-filenames-when-moving t ; important for isync
          mu4e-headers-date-format "%Y-%m-%d %H:%M"
          mu4e-headers-fields
          '((:date          .  17)
            (:flags         .   5)
            (:from          .  22)
            (:subject       .  nil))
          mu4e-get-mail-command "env PATH=/usr/bin:/home/japhir/bin: mbsync -a"
          mu4e-headers-include-related t
          mu4e-compose-format-flowed t  ; plain-text nice to read on phone
          ;; use-hard-newlines t             ; above doesn't work for Outlooks, so disabled for colleagues
          mu4e-confirm-quit nil
          mu4e-view-show-images t)

    ;; this makes the html preview of emails nicer. Got it from System Crafters Discord channel
    ;; might be default in emacs 27!
    ;; (setq mu4e-html2text-command 'mu4e-shr2text
    ;;       shr-color-visible-luminance-min 60
    ;;       shr-color-visible-distance-min 5
    ;;       shr-use-colors nil)
    ;; Prevent emails from setting background color
    ;; (advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))

    ;; if you press a V on an email you open it in the browser
    (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)
    ;; use imagemagick, if available
    ;; (when (fboundp 'imagemagick-register-types)
    ;;   (imagemagick-register-types))
    (setq org-mu4e-link-query-in-headers-mode nil))
#+end_src
* science packages
** COMMENT eval-in-repl
from: https://iqss.github.io/IQSS.emacs/init.html#general_repl_(comint)_config
use other programming languages in interactive environment, similar to how ESS does it
#+begin_src emacs-lisp
  (use-package eval-in-repl
    :hook (comint-mode . (lambda() (setq truncate-lines 1)))
    :config
    (setq comint-process-echoes t
      eir-repl-placement 'below)
    (setq comint-scroll-to-bottom-on-input t)
    (setq comint-scroll-to-bottom-on-output t)
    (setq comint-move-point-for-output t))
#+end_src
** ess
emacs speaks statistics, work with R etc.
*** insert pipe %>% function
#+begin_src emacs-lisp
  (defun japhir/insert-r-pipe ()
    "Insert the pipe operator in R, %>%"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))
#+end_src
*** use-package
#+begin_src emacs-lisp
  (use-package ess
    ;; :load-path "/usr/share/emacs/site-lisp/ess"
    :init (require 'ess-site)  ;; seems like this is needed to load the minor modes as well keybindings don't work without it
    :hook ((ess-r-mode inferior-ess-r-mode) . electric-layout-mode)  ;; commented out since new curly-curly operator for rlang
    :commands R
    :bind (:map ess-r-mode-map
           (";" . ess-insert-assign)
           ;; RStudio equivalents
           ("M--" . ess-insert-assign)
           ("C-S-m" . japhir/insert-r-pipe)
           :map inferior-ess-r-mode-map
           (";" . ess-insert-assign)
           ("M--" . ess-insert-assign)
           ("C-S-m" . japhir/insert-r-pipe))
    :config
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (or (string= lang "R")
               (string= lang "elisp")
               (string= lang "emacs-lisp")
               (string= lang "latex"))))
    (setq display-buffer-alist
          '(("*R Dired"
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . right)
             (slot . -1)
             (window-width . 0.33))
            ("*R"
             (display-buffer-reuse-window display-buffer-in-side-window)
             (slot . 2)
             (window-width . 0.5))
            ("*Help"
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . right)
             (slot . 1)
             (window-width . 0.33)))
          ;; ess-help-own-frame 'one
          ess-auto-width 'frame
          org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate
          ess-style 'RStudio
          ess-use-auto-complete nil
          ess-use-company t
          ess-indent-with-fancy-comments nil
          ess-pdf-viewer-pref 'emacsclient
          inferior-R-args "--no-restore-history --no-save"
          ess-ask-for-ess-directory nil
          ess-R-font-lock-keywords
          (quote
           ((ess-R-fl-keyword:modifiers)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:keywords . t)
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-R-fl-keyword:fun-cals . t)
            (ess-R-fl-keyword:numbers)
            (ess-R-fl-keyword:operators . t)
            (ess-R-fl-keyword:delimiters)
            (ess-R-fl-keyword:=)
            (ess-R-fl-keyword:F&T)))))
#+end_src
*** electric-spacing operator
Put spaces around operators such as +, -, etc.
#+begin_src emacs-lisp
  (use-package electric-operator
    :hook ((R-mode ess-r-mode inferior-ess-r-mode). electric-operator-mode)
    ;; :config
    ;; (electric-operator-add-rules-for-mode 'ess-r-mode
    ;;                                       (cons "{{" "{{ ")
    ;;                                       (cons "}" " }"))
    :custom
    (electric-operator-R-named-argument-style 'spaced))
#+end_src
*** compilation window height
#+begin_src emacs-lisp
  (setq compilation-window-height 15)
#+end_src
*** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src
** markdown-mode
markdown mode for writing
#+begin_src emacs-lisp
  (use-package markdown-mode :defer t)
#+end_src
** polymode
for working with .Rmd files etc.
#+begin_src emacs-lisp
  (use-package polymode :defer t)
  (use-package poly-markdown :defer t)
  ;; (use-package poly-R)
#+end_src
** COMMENT matlab
if I'm ever required to work in non-open-source
#+begin_src emacs-lisp
  (use-package matlab
    :ensure nil
    :init (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
    :mode ("\\.m\\'" . matlab-mode)
    :interpreter "matlab"
    :config
    (setq matlab-indent-function t)
    (setq matlab-indent-function "matlab"))
#+end_src
** pandoc-mode
exporting markdown
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :defer t
    :hook (markdown-mode . pandoc-mode))
#+end_src
** mermaid
#+begin_src emacs-lisp
  (use-package ob-mermaid
    :config
    (setq ob-mermaid-cli-path "/usr/bin/mmdc"))
#+end_src
** org-pandoc
https://github.com/kawabata/ox-pandoc
#+begin_src emacs-lisp
    (use-package ox-pandoc
      :config
      (setq org-pandoc-options '((bibliography
            . "/home/japhir/Documents/References/PhD.bib"))
            ;; org-pandoc-options-for-docx '((reference-docx
            ;; . "/home/japhir/SurfDrive/PhD/chapters/wordtemplate.docx"))
            ))
#+end_src
** LaTeX (AUCTeX, RefTeX)
for working with \LaTeX
#+begin_src emacs-lisp
  ;(load "auctex.el" nil t t)
  ;(load "preview-latex.el" nil t t)
  (use-package tex
    :load-path "/usr/share/emacs/site-lisp/auctex/"
    ;; :diminish reftex-mode
    :hook
    (LaTeX-mode . turn-on-reftex)
    (LaTeX-mode . turn-on-auto-fill)
    (LaTeX-mode . prettify-symbols-mode)
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq reftex-plug-into-AUCTeX t))
#+end_src
** COMMENT hl-todo
hmm it does overwrite my nice highlighting of NEXT
#+begin_src emacs-lisp
  (use-package hl-todo
    :bind (:map hl-todo-mode-map
                ("C-c k" . hl-todo-previous)
                ("C-c j" . hl-todo-next))
    :hook
    ((LaTeX-mode ess-mode ess-r-mode org-mode) . hl-todo-mode))
#+end_src
** bibtex/ivy-bibtex
reference manager I use it in conjunction with zotero, which generates the
.bib files, and org-ref, to insert citations in org files.
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :after ivy
    :config
    ;; (autoload 'ivy-bibtex "ivy-bibtex" "" t)
    (require 'ivy-bibtex)
    (setq bibtex-completion-bibliography
          '("/home/japhir/SurfDrive/bibliography/references.bib"
            "/home/japhir/Documents/References/PhD.bib")))
#+end_src
** helm-bibtex
#+begin_src emacs-lisp
  (setq
   bibtex-completion-notes-path "/home/japhir/SurfDrive/bibliography/notes/"
   ;; bibtex-completion-bibliography "/home/japhir/SurfDrive/bibliography/references.bib" ; defined elsewhere
   ;; bibtex-completion-pdf-field "file"
   bibtex-completion-notes-template-multiple-files
   (concat
   "#+title: ${title}\n"
   "#+created: %u\n"
   "#+last_modified: %U\n"
   "#+roam_key: cite:${=key=}\n\n\n"
   "* TODO Notes\n"
   ":PROPERTIES:\n"
   ":Custom_ID: ${=key=}\n"
   ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
   ":AUTHOR: ${author-abbrev}\n"
   ":JOURNAL: ${journaltitle}\n"
   ":DATE: ${date}\n"
   ":YEAR: ${year}\n"
   ":DOI: ${doi}\n"
   ":URL: ${url}\n"
   ":END:\n\n"))
#+end_src
* secret directories
These are all the settings that require secret directories, such as my org
agenda files and google calendar. They overwrite the settings with "<...>"
syntax above.
#+begin_src emacs-lisp
  ;; (use-package emacsdirs)
  (load "~/.emacs.d/secretdirs.el" t)
#+end_src
* reset gc-cons-threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1)
#+end_src
