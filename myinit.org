* set gc-cons threshold low
#+begin_src emacs-lisp
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)
#+end_src
* use-package
Use-package is an amazing resource to clean up my init file and have it play
nice on both my desktop and laptop.
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
  (use-package diminish)  ; to omit lines from the mode-line
  (use-package bind-key)  ; for easy keybindings
#+end_src
* dirvar
define dirvars 'org-in-file', 'org-gtd-file', etc.
#+begin_src emacs-lisp
  (defvar org-in-file "~/org/inbox.org"
    "GTD Inbox")
  (defvar org-gtd-file "~/org/todo.org"
    "Personal TODO's")
  (defvar org-tickler-file "~/org/tickler.org"
    "Tickler")
  (defvar org-clumped-file "~/org/clumpednotes.org"
    "Work TODO's")
  (defvar org-notes-file "~/org/notes.org"
    "General Notes and Protocols")
  (defvar org-someday-file "~/org/someday.org"
    "Someday/Maybe")
  (defvar org-journal-file "~/org/journal.org"
    "Journal")
  (defvar org-lists-file "~/org/lists.org"
    "Lists of Movies etc.")
  (defvar org-cal-file "~/org/calendars/gcal.org"
    "Google Calendar")
#+end_src
* org-roam/notes/ref directories
#+begin_src emacs-lisp
  (setq
   org_notes (concat (getenv "HOME") "/SurfDrive/bibliography/notes/")
   zot_bib (concat (getenv "HOME") "/SurfDrive/bibliography/bibliography.bib")
   org-directory org_notes
   deft-directory org_notes
   org-roam-directory org_notes)
#+end_src
* interface
** turn off UI elements and small tweaks
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)   ; turn off the scroll bar
  (tool-bar-mode -1)     ; turn off the tool bar
  (menu-bar-mode -1)     ; turn off the menu
  (setq visible-bell 1)  ; turn off beeps, make them flash!
  (global-hl-line-mode t)
  ;; typing
  (setq-default fill-column 79)
  (setq sentence-end-double-space nil)
  ;; typed text will replace highlighted region
  (delete-selection-mode 1)
  ;; backspace deletes one character instead of one column
  (global-set-key (kbd "DEL") 'backward-delete-char)
  ;; remove trailing whitespace before save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; prefer utf-8
  (prefer-coding-system 'utf-8-unix)

  (setq mouse-wheel-progressive-speed nil)

  ;; automatically re-open files that have been changed on disk
  (global-auto-revert-mode 1)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; always follow symlinks w/o asking
  (require 'vc-hooks)
  (setq vc-follow-symlinks t)
#+end_src
** auto-save: don't make a mess of my folders
auto-save when I exit normal mode
#+begin_src R
  (defun my-save-if-bufferfilename ()
    (if (buffer-file-name)
        (progn (save-buffer))
          (message "no file is associated to this buffer: do nothing")))
  (add-hook 'evil-insert-state-exit-hook 'my-save-if-bufferfilename)
#+end_src

#+begin_src emacs-lisp
  (setq auto-save-default t  ;; let's try autosave for a while
        backup-inhibited t
        confirm-nonexistent-file-or-buffer nil
        create-lockfiles nil)
#+end_src
** COMMENT frames-only-mode
let my window manager handle screen creation
#+begin_src emacs-lisp :tangle no
  (use-package frames-only-mode
    :config (setq frames-only-mode nil))
#+end_src
** default-text-scale
#+begin_src emacs-lisp
  (use-package default-text-scale
    :config (setq default-text-scale-mode t))
#+end_src
** play nice with parentheses
#+begin_src emacs-lisp
  (electric-pair-mode 1) ; auto-insert matching bracket
  (show-paren-mode 1)    ; turn on paren match highlighting
#+end_src
** helpful
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
  (use-package helpful)
#+end_src
** demos
Insert demos after describe function https://github.com/xuchunyang/elisp-demos
#+begin_src emacs-lisp
  (use-package elisp-demos
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
* change appearance
** smartparens
insert matching parentheses and jump across them
#+begin_src emacs-lisp
  (use-package smartparens-config
    :hook ((prog-mode markdown-mode org-mode) . turn-on-smartparens-strict-mode)
    :ensure smartparens
    :config (progn (show-smartparens-global-mode t)))
#+end_src
** evil-smartparens
#+begin_src emacs-lisp
  (use-package evil-smartparens
    :after evil
    :hook ((prog-mode markdown-mode org-mode) . evil-smartparens-mode))
#+end_src
** rainbow-delimiters
matching parenthesis are highlighted with rainbow colours.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    :hook ((prog-mode LaTeX-mode) . rainbow-delimiters-mode))
#+end_src
** set the theme
*** clean up previous theme
from this [[https://explog.in/dot/emacs/config.html][config]] from [[https://www.reddit.com/r/emacs/comments/4mzynd/what_emacs_theme_are_you_currently_using/d43c5cw][reddit]]
#+begin_src emacs-lisp
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
#+end_src
*** doom
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src
*** prot's modus themes
**** operandi (light theme)
#+begin_src emacs-lisp
  (use-package modus-operandi-theme
    :init
    (setq modus-operandi-theme-bold-constructs t
          modus-operandi-theme-slanted-constructs t
          modus-operandi-theme-faint-syntax t
          modus-operandi-theme-prompts 'subtle
          modus-operandi-theme-mode-line nil
          modus-operandi-theme-completions 'opinionated
          modus-operandi-theme-fringes nil
          modus-operandi-theme-intense-hl-line t
          modus-operandi-theme-intense-paren-match t
          modus-operandi-theme-diffs nil
          modus-operandi-theme-org-blocks nil
          modus-operandi-theme-org-blocks 'rainbow
          modus-operandi-theme-headings nil
          modus-operandi-theme-scale-headings t
          modus-operandi-theme-variable-pitch-headings t))
#+end_src
**** vivendi (dark theme)
#+begin_src emacs-lisp :tangle no
  (use-package modus-vivendi-theme
    :init
    (setq modus-vivendi-theme-bold-constructs t
          modus-vivendi-theme-slanted-constructs t
          modus-vivendi-theme-faint-syntax t
          modus-vivendi-theme-prompts 'subtle
          modus-vivendi-theme-mode-line nil
          modus-vivendi-theme-completions 'opinionated
          modus-vivendi-theme-fringes nil
          modus-vivendi-theme-intense-hl-line t
          modus-vivendi-theme-intense-paren-match t
          modus-vivendi-theme-diffs nil
          modus-vivendi-theme-org-blocks nil
          modus-vivendi-theme-org-blocks 'rainbow
          modus-vivendi-theme-headings nil
          modus-vivendi-theme-scale-headings t
          modus-vivendi-theme-variable-pitch-headings t))
#+end_src
**** auto-set theme by time of day
#+begin_src emacs-lisp
  ;; Light for the day
  (load-theme 'modus-operandi t t)
  (run-at-time "10:10" (* 60 60 24)
               (lambda () (enable-theme 'modus-operandi)))

  ;; Dark for the night
  (load-theme 'modus-vivendi t t)
  (run-at-time "20:00" (* 60 60 24)
               (lambda () (enable-theme 'modus-vivendi)))
#+end_src
**** toggle theme
#+begin_src emacs-lisp
  (defun modus-themes-toggle ()
    "Toggle between `modus-operandi' and `modus-vivendi' themes."
    (interactive)
    (if (eq (car custom-enabled-themes) 'modus-operandi)
        (progn
          (disable-theme 'modus-operandi)
          (load-theme 'modus-vivendi t))
      (disable-theme 'modus-vivendi)
      (load-theme 'modus-operandi t)))
#+end_src
*** COMMENT doom modeline
#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src
** set variable font
#+begin_src emacs-lisp
  (variable-pitch-mode 1)
  (set-face-attribute 'variable-pitch nil :family "Tex Gyre Pagella" :height 120)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 120)
  (set-face-attribute 'default nil :family "Iosevka" :height 120)
#+end_src

** rainbow-mode
Highlight hex colours!
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook ((html-mode r-mode) . rainbow-mode))
#+end_src
** compilation window height
#+begin_src emacs-lisp
  (setq compilation-window-height 15)
#+end_src
* version control
** diff-hl
Highlight diffs of current version-controlled buffer in the margin. Quite cool!
#+begin_src emacs-lisp
  (use-package diff-hl
    :init
    (global-diff-hl-mode)
    (setq diff-hl-gutter-mode t)
    (diff-hl-flydiff-mode +1)
    :hook (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src
** magit
git management, essential!
#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("M-g" . magit-status))
#+end_src
* custom functions/keyboard shortcuts
** clone-indirect-buffer-other-frame
#+begin_src emacs-lisp
  (defun clone-indirect-buffer-other-frame (newname display-flag &optional norecord)
    "Like `clone-indirect-buffer' but display in another frame."
    (interactive
     (progn
       (if (get major-mode 'no-clone-indirect)
           (error "Cannot indirectly clone a buffer in %s mode" mode-name))
       (list (if current-prefix-arg
                 (read-buffer "Name of indirect buffer: " (current-buffer)))
             t)))
    (let ((pop-up-frames t))
      (clone-indirect-buffer newname display-flag norecord)))
  (global-set-key (kbd "C-x 5 c") 'clone-indirect-buffer-other-frame)
#+end_src
** revert buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src
** firefox as default browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")
#+end_src
** get-labels in current buffer
from [[https://kitchingroup.cheme.cmu.edu/blog/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links/][JKitchin's blog]]
#+begin_src emacs-lisp
  (defun get-labels ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((matches '()))
        (while (re-search-forward "label:\\([a-zA-z0-9:-]*\\)" (point-max) t)
          (add-to-list 'matches (match-string-no-properties 1) t))
        matches)))
#+end_src

this allows the yasnippet template to autocomplete ref: with all the labels in
the buffer.
* evil
** evil
vim emulator
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ;; (setq evil-cross-lines t)
    ;; (setq evil-want-C-u-scroll t) ; C-u scrolls up half page
    :config
    (evil-mode 1))
#+end_src
** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** evil-org
https://github.com/Somelauw/evil-org-mode
evil keymap for org-mode
#+begin_src emacs-lisp
  (use-package evil-org
    :after org evil
    :hook ((org-mode . evil-org-mode)
           (evil-org-mode . (lambda ()
                              (evil-org-set-key-theme
                               '(navigation insert return textobjects additional shift todo heading calendar))))
           (org-log-buffer-setup . evil-insert-state)
           (org-capture-mode . evil-insert-state)
           (yas-before-expand-snippet . evil-insert-state))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
** evil-easymotion
Link evil forward commands etc. to avy jump previews so you can jump down 10
lines if you forgot to press 10j. https://github.com/PythonNut/evil-easymotion/
#+begin_src emacs-lisp
  (use-package evil-easymotion
    :config
    (evilem-default-keybindings "SPC"))
#+end_src
** evil-snipe
https://github.com/hlissner/evil-snipe
#+begin_src emacs-lisp
  (use-package evil-snipe
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1))
#+end_src
** evil-commentary
https://github.com/linktohack/evil-commentary
comment/uncomment with gc
#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src
** evil-magit
evil keybindings for magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :after magit
    :hook
    (git-commit-mode . evil-insert-state)
    (magit-mode . turn-off-evil-snipe-override-mode)
    :config
    (evil-set-initial-state 'magit-log-edit-mode 'insert))
#+end_src
* org-mode
** my gtd and inbox files finding functions
org-in-file and org-gtd-file are defined in emacsdirs.el (private file).
#+begin_src emacs-lisp
  ;; TODO: figure out how to do this in a less stupid way
  (defun open-gtd-file ()
    "Open the GTD file."
    (interactive)
    (find-file org-gtd-file))
  (defun open-inbox-file ()
    "Open the inbox file."
    (interactive)
    (find-file org-in-file))
  (defun open-clumped-file ()
     "Open the clumped file."
     (interactive)
     (find-file org-clumped-file))
  #+end_src
** setup
#+begin_src emacs-lisp
  ;; get latest org-mode from other repo than elpa
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (use-package org
    :pin org
    :ensure org-plus-contrib
#+end_src
** keybindings
#+begin_src emacs-lisp
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c g" . open-gtd-file)
   ("C-c i" . open-inbox-file)
   ("C-c t" . open-clumped-file)
   ("C-c !" . org-time-stamp-inactive))
#+end_src
** hook
#+begin_src emacs-lisp
  :hook (org-mode . visual-line-mode)
#+end_src
** basics
#+begin_src emacs-lisp
  :config
  (setq org-ctrl-k-protect-subtree t)
  (setq org-return-follows-link t)
  ;; (setf org-special-ctrl-a/e t) ; I use evil's 0 and $ anyway
  ;; folded drawers no longer ruin new entries
  (setq org-M-RET-may-split-line '((default . nil)))
  (setq org-startup-with-inline-images t)
#+end_src
** edit heading in indirect buffer
[[https://www.reddit.com/r/orgmode/comments/fuvdqv/org_notetaking_workflow_with_orgroam/fmhl3ml?utm_source=share&utm_medium=web2x][taken from this reddit thread by alphapapa]]
#+begin_src emacs-lisp
(defun ap/org-tree-to-indirect-buffer (&optional arg)
  "Create indirect buffer and narrow it to current subtree.
The buffer is named after the subtree heading, with the filename
appended.  If a buffer by that name already exists, it is
selected instead of creating a new buffer."
  (interactive "P")
  (let* ((new-buffer-p)
         (pos (point))
         (buffer-name (let* ((heading (org-get-heading t t))
                             (level (org-outline-level))
                             (face (intern (concat "outline-" (number-to-string level))))
                             (heading-string (propertize (org-link-display-format heading)
                                                         'face face)))
                        (concat heading-string "::" (buffer-name))))
         (new-buffer (or (get-buffer buffer-name)
                         (prog1 (condition-case nil
                                    (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                  (error (make-indirect-buffer (current-buffer) buffer-name)))
                           (setq new-buffer-p t)))))
    (switch-to-buffer new-buffer)
    (when new-buffer-p
      ;; I don't understand why setting the point again is necessary, but it is.
      (goto-char pos)
      (rename-buffer buffer-name)
      (org-narrow-to-subtree))))

(advice-add 'org-tree-to-indirect-buffer :override 'ap/org-tree-to-indirect-buffer)
#+end_src
** clocking/logging
#+begin_src emacs-lisp
  (setq org-check-running-clock t
        org-log-note-clock-out t
        org-log-done 'time
        org-log-into-drawer t)
#+end_src
** theming
#+begin_src emacs-lisp
  (setf org-tags-column -65)
  (setq org-startup-indented t
        org-agenda-block-separator ""
        org-fontify-emphasized-text t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-pretty-entities t
        org-ellipsis " ▼ " ;▼ … ◦
        org-hide-emphasis-markers t)
#+end_src
*** org-superstar-mode
https://github.com/integral-dw/org-superstar-mode
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook
    (org-mode . (lambda () (org-superstar-mode 1)))
    :config
    (setq org-superstar-headline-bullets-list
          '("◉" "●" "○" "♦" "◆" "►" "▸"))
    (setq org-superstar-todo-bullet-alist '(("NEXT" " ☐" ?☐)
                                            ("TICK" " →" ?*)
                                            ("WAIT" " ☕" ?☕)
                                            ("SOME" " ⋯" ?☼)
                                            ("DONE" " ☑" ?☑)
                                            ("CANC" " ❌" ?❌)))
    (setq org-superstar-special-todo-items t))
#+end_src
** file associations
#+begin_src emacs-lisp
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.x?html?\\'" . "xdg-open %s")
          ("\\.pdf\\'" . (lambda (file link)
                           (org-pdfview-open link)))
          ("\\.mp4\\'" . "xdg-open %s")
          ("\\.webm\\'" . "xdg-open %s")
          ("\\.mkv\\'" . "xdg-open %s")
          ("\\.pdf.xoj\\'" . "xournal %s")))
#+end_src

** org-protocol
#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src
** GTD stuff
*** org-agenda
#+begin_src emacs-lisp
  ;; (setq org-agenda-files (list "<file1.org> etc."))
  (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
  (setq org-deadline-warning-days 14)
  ;; exclude scheduled items from all todo's in list
  (setq org-agenda-todo-ignore-scheduled t)
  ;; (setq org-agenda-todo-ignore-deadlines t)
  ;; (setq org-agenda-todo-ignore-timestamp t)
  ;; (setq org-agenda-todo-ignore-with-date t)
  ;;(setq org-agenda-prefix-format "  %-17:c%?-12t% s") ; TODO: see if I like the default
  (setq org-agenda-include-all-todo nil)
#+end_src
*** agenda files
all the org-files in my org-directory
#+begin_src emacs-lisp
  ;(setq org-directory "~/org/") ;; changed for org-roam capture
  (setq org-agenda-files (directory-files-recursively "~/org" "\\.org$"))
#+end_src
*** refile targets
swyper makes refiling amazing!
#+begin_src emacs-lisp
  (setq org-refile-targets (quote ((nil :maxlevel . 9)  ;; current file
                                   (org-gtd-file :maxlevel . 3)
                                   (org-tickler-file :maxlevel . 2)
                                   (org-notes-file :maxlevel . 2)
                                   (org-lists-file :maxlevel . 2)
                                   (org-someday-file :maxlevel . 2)
                                   (org-clumped-file :maxlevel . 4))))
  (setq org-outline-path-complete-in-steps nil)   ;; Refile in a single go
  (setq org-refile-use-outline-path t)            ;; Show full paths for refiling
#+end_src
*** agenda filters
Filter tasks by context (sorted by todo state)
#+begin_src emacs-lisp
  (setq org-agenda-sorting-strategy
        '((agenda habit-down time-up priority-down todo-state-up category-keep)
          (todo todo-state-up priority-down category-keep)
          (tags priority-down todo-state-up category-keep)
          (search category-keep)))
  (setq org-agenda-custom-commands
        '(("i" "Inbox" tags "in")
          ("I" "Important"
           ((tags "PRIORITY=\"A\"/PROJ"
                  ((org-agenda-overriding-header "High-priority projects:")))
            (tags "PRIORITY=\"A\"/!-PROJ"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))))
          ("A" agenda*)
          ("n" "Next Actions" todo "NEXT")
          ("w" "Waiting" todo "WAIT")
          ;; ("s" "Someday/Maybe" todo "SOME")
          ("j" "Projects" tags "prj/-SOME-DONE-CANC")
          ("W" "Work" tags-todo "-Personal/!-WAIT"
           ((org-agenda-todo-ignore-scheduled t)))
          ("P" "Personal" tags-todo "-Work/!-WAIT"
           ((org-agenda-todo-ignore-scheduled t)))
          ("g" . "GTD contexts")
          ("gh" "Home" tags-todo "@home")
          ("gk" "Klusjes/Craft" tags-todo "@klusje")
          ("go" "Office" tags-todo "@office")
          ("ge" "Errands" tags-todo "@errands")
          ("gl" "Laboratory" tags-todo "@lab")
          ("gt" "Travel" tags-todo "@travel")
          ("gc" "Computer" tags-todo "@computer")
          ("gB" "Phone" tags-todo "@phone")
          ("gm" "e-mail" tags-todo "@email")
          ;; ("gs" "Slack" tags-todo "@slack")
          ("gb" "Bank" tags-todo "@bank")
          ("gw" "Write" tags-todo "@write")
          ("gp" "Program" tags-todo "@program")
          ("gc" "Create/Plot" tags-todo "@createplot")
          ("gr" "Read" tags-todo "@read")
          ("gg" "Research" tags-todo "@research")
          ("gs" "Schedule" tags-todo "@schedule")
          ("ga" "Agenda" tags-todo "@agenda")
          ("E" . "Energy")
          ("E1" "Morning" tags-todo "morning")
          ("E2" "Afternoon" tags-todo "afternoon")
          ("E3" "Evening" tags-todo "evening")
          ("p" . "People")
          ("pm" "Martin" tags-todo "Martin")
          ("pl" "Luc" tags-todo "Luc")
          ("pa" "Anne" tags-todo "Anne")
          ("pf" "FEST" tags-todo "FEST")
          ("pi" "Inigo" tags-todo "Inigo")))
#+end_src
*** stuck projects
#+begin_src emacs-lisp
  (setq org-tags-exclude-from-inheritance '("prj")
        org-stuck-projects '("+prj/-CANC-SOME-DONE"
                             ("NEXT" "WAIT" "TICK") ()))  ;;  "SOME"
#+end_src
*** capture templates
customize capture templates
 #+begin_src emacs-lisp
   (setq org-capture-templates
         '(;("a" "Appointment" entry (file org-in-file)
           ; "* %?\n  %^T\n")
           ("t" "Todo" entry (file org-in-file)
            "* %?\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n %a\n")
           ("T" "Todo-nolink-tag" entry (file org-in-file)
            "* %? %^G\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n")
           ("m" "Email" entry (file org-in-file)
            "* %? :@email:\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n %a\n")
           ("w" "Website" entry (file org-in-file)
            "* %?\nEntered on %U\n %i\n %a")
           ("p" "Protocol" entry (file org-in-file)
            "* %:description%? :@web:\n:PROPERTIES:\n:CREATED: %U\n:END:\n[[%:link][%:description]]\n#+BEGIN_QUOTE\n%:initial\n#+END_QUOTE\n")
           ("L" "Protocol Link" entry (file org-in-file)
            "* %:description%? :@web:\n:PROPERTIES:\n:CREATED: %U\n:END:\n[[%:link][%:description]]")
           ("j" "Journal" entry (file+olp+datetree org-journal-file)
            "* %?\nEntered on %U\n %i\n %a")))
 #+end_src
*** TODO states
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "WAIT(w!/!)" "TICK(t)" "SOME(s!/!)" "|"
                    "DONE(d)" "CANC(c)")))
  ;; prettify the todo keywords
  (setq org-todo-keyword-faces
        '(("NEXT" . (:family "Iosevka" :foreground "light goldenrod yellow" :background "red" :weight bold))
          ("WAIT" . (:family "Iosevka" :foreground "dim gray" :background "yellow"))
          ("TICK" . (:family "Iosevka" :background "light slate blue"))
          ("SOME" . (:family "Iosevka" :foreground "ghost white"  :background "deep sky blue"))
          ("DONE" . (:family "Iosevka" :foreground "green4"       :background "pale green"))
          ("CANC" . (:family "Iosevka" :foreground "dim gray"     :background "gray"))))
#+end_src
*** effort estimates
#+begin_src emacs-lisp
  (add-to-list 'org-global-properties
               '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
#+end_src
*** habits
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit t)
#+end_src
*** context tags
#+begin_src emacs-lisp
  (setq org-fast-tag-selection-single-key t)
  (setq org-tag-alist '(("prj" . ?j)
                        (:startgroup . nil)
                        ("@home" . ?h)
                        ("@office" . ?o)
                        ("@errands" . ?e)
                        ("@lab" . ?l)
                        ("@travel" . ?t)
                        (:endgroup . nil)
                        ("@computer" . ?c)  ;; general in case I can't decide
                        ("@klusje" . ?k)    ;; crafts, things that require my toolbox
                        ("@phone" . ?B)     ;; b for Dutch "bellen"
                        ("@email" . ?m)
                        ;; ("@slack". ?s)
                        ("@bank" . ?b)      ;; I need my little reader thingie
                        ("@write" . ?w)
                        ("@program" . ?p)
                        ("@createplot" . ?C)
                        ("@read" . ?r)
                        ("@research" . ?g)
                        ("@schedule" . ?s)
                        ("@agenda" . ?a)    ;; things to discuss
                        (:startgroup . nil)
                        ("morning" . ?1) ("afternoon" .?2) ("evening" .?3)
                        (:endgroup . nil)
                        (:startgroup . nil)
                        ("Work" . ?W) ("Personal" . ?P)
                        (:endgroup . nil)
                        ;; programming/software stuff
                        ("R" . ?R) ("python" . ?y) ("org" . ?O) ("Bayes" . ?B) ("emacs" . ?E) ("inkscape" . ?i)
                        ;; tags to accompany the @agenda context
                        ("Family" . ?F) ("Martin" . ?M) ("Luc" . ?L) ("Inigo" . ?I) ("Anne" . ?A) ("Niels" . ?N) ("Appy") ("FEST")))
#+end_src
** exporting
*** org-babel languages
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (python . t)
     (latex . t)
     (shell . t)
     (stan . t)
     (latex . t)
     (R . t)))
#+end_src
*** org-export odt
#+begin_src emacs-lisp
  (require 'ob-org)
#+end_src
*** ox-extra
org-export ignore headlines with ~:ignore:~ tag
#+begin_src emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
#+end_src
*** ox-latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src
*** org-latex export settings
basic latex settings
#+begin_src emacs-lisp
  (setq org-highlight-latex-and-related '(native script entities))
  (setq org-latex-create-formula-image-program 'dvipng)
  ;; (setq org-latex-default-figure-position 'htbp)
  (setq org-latex-pdf-process
        (list "latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode -output-directory %o' -f -pdf %f"))
  (setq org-latex-prefer-user-labels t)
#+end_src
*** org-entities-user
These are nice shorthands for commands I use often. In org-source they look
nice, and they export to both \LaTeX and =html= correctly. Note that
unfortunately, special entity names cannot contain numerics, so =\d18O= is not
possible.
#+begin_src emacs-lisp
  (setq org-entities-user
        '(("celsius" "\\(^{\\circ}\\)C" nil "&deg;C" "°C" "°C" "℃")
          ("minus" "\\-" t "&minus;" "-" "-" "−")  ;; defaults to =\\minus= in LaTeX, which doesn't work.
          ("permil" "\\textperthousand{}" nil "&permil;" "per thousand" "per thousand" "‰")  ;; exactly the same as in org-entities
          ("us" "\\," nil "&nbsp;" " " " " " ")
          ("appr" "\\sim" t "&tilde;" "~" "~" "~")
          ;; for gps-coordinates
          ("degree" "^{\\circ}" t "&deg;" "°" "°" "°")
          ("arcminute" "^{'}" t "&prime;" "'" "′" "′")
          ("arcsecond" "^{''}" t "&Prime;" "\"" "″" "″")))
#+end_src
*** latejx class =ijkarticle=
#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
         '("ijkarticle"
  "\\documentclass{article}
  \\usepackage[citestyle=authoryear,bibstyle=authoryear,hyperref=true,maxcitenames=3,url=true,backend=biber,natbib=true]{biblatex}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
*** org source code block settings
[[https://emacs.stackexchange.com/a/47370/9748][Nice answer on how to have point on a blank line in code block]]
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
               '("se" . "src emacs-lisp
  "))
  ;; TODO figure out how to add multiple items to the list
  (add-to-list 'org-structure-template-alist
               '("sr" . "src R
  "))
#+end_src
** close use-package org
#+begin_src emacs-lisp
  )
#+end_src
** make-capture-frame
If we call make-capture-frame from anywhere, it creates a new frame named
capture which I can decorate using my window manager, and which disappears
after the capturing is complete.

Sources:
- [[https://lists.gnu.org/archive/html/emacs-orgmode/2013-10/msg00150.html][an old mailing list answer]]
- this blog: https://www.diegoberrocal.com/blog/2015/08/19/org-protocol/
- this more recent blog: https://fuco1.github.io/2017-09-02-Maximize-the-org-capture-buffer.html
- this very nice implementation: [[https://gist.github.com/progfolio/af627354f87542879de3ddc30a31adc1][Emacs as an Org capture server]]

#+begin_src emacs-lisp
  (defun make-capture-frame ()
    "Create a new frame and org-capture."
    (interactive)
    (require 'cl-lib)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
              (condition-case err
                  (org-capture)
                (user-error (when (string= (cadr err) "Abort")
                              (delete-frame))))))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advice capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
#+end_src
** org-roam
[[https://org-roam.readthedocs.io/en/latest/installation/][docs here]]
[[file:~/SurfDrive/bibliography/notes//20200427230825-how_to_take_smart_notes.org][How to Take Smart Notes]]

#+begin_src emacs-lisp
  (use-package org-roam
    :hook (org-mode . org-roam-mode)
    :commands (org-roam-buffer-toggle-display
               org-roam-find-file
               org-roam-graph
               org-roam-insert
               org-roam-switch-to-buffer
               org-roam-dailies-date
               org-roam-dailies-today
               org-roam-dailies-tomorrow
               org-roam-dailies-yesterday)
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert)))
    :config
    (setq org-roam-verbose nil  ; https://youtu.be/fn4jIlFwuLU
          org-roam-buffer-no-delete-other-windows t ; make org-roam buffer sticky
          org-roam-completion-system 'default)

    ;; Normally, the org-roam buffer doesn't open until you explicitly call
    ;; `org-roam'. If `+org-roam-open-buffer-on-find-file' is non-nil, the
    ;; org-roam buffer will be opened for you when you use `org-roam-find-file'
    ;; (but not `find-file', to limit the scope of this behavior).
    ;; (add-hook 'find-file-hook
    ;;   (defun +org-roam-open-buffer-maybe-h ()
    ;;     (and +org-roam-open-buffer-on-find-file
    ;;          (memq 'org-roam-buffer--update-maybe post-command-hook)
    ;;          (not (window-parameter nil 'window-side)) ; don't proc for popups
    ;;          (not (eq 'visible (org-roam-buffer--visibility)))
    ;;          (with-current-buffer (window-buffer)
    ;;            (org-roam-buffer--get-create))))
    ;; Hide the mode line in the org-roam buffer, since it serves no purpose. This
    ;; makes it easier to distinguish among other org buffers.
    ;; (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode)
    )


  ;; Since the org module lazy loads org-protocol (waits until an org URL is
  ;; detected), we can safely chain `org-roam-protocol' to it.
  ;; (use-package org-roam-protocol
  ;;   :after org-protocol)


  ;; (use-package company-org-roam
  ;;   :after org-roam
  ;;   :config
  ;;   (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))
#+end_src
** COMMENT my own old org-roam config
#+begin_src emacs-lisp :eval never :tangle no
  (use-package org-roam
    :diminish org-roam-mode
    :hook (after-init . org-roam-mode)
    :custom
    ;; (org-roam-directory "/home/japhir/org/roam/")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n g" . org-roam-graph-show))
                :map org-mode-map
                (("C-c n i" . org-roam-insert)))
    :config
    (setq org-roam-completion-system 'ivy))
#+end_src
** org-roam-bibtex
#+begin_src emacs-lisp
    (use-package org-roam-bibtex
      :after (org-roam)
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :bind (:map org-mode-map
                  (("C-c n a" . orb-note-actions)))
      :config
      (setq org-roam-bibtex-preformat-keywords
            '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
      (setq orb-templates
            '(("r" "ref" plain (function org-roam-capture--get-point)
               ""
               :file-name "${slug}"
               :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

    - tags ::
    - keywords :: ${keywords}

    \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

               :unnarrowed t))))
#+end_src

** ob-async
allow asyncronous code block evaluation https://github.com/astahlman/ob-async
#+begin_src emacs-lisp
  (use-package ob-async)
#+end_src
** org-pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org
    :bind ("C-c p" . org-pomodoro)
    :config (setq org-pomodoro-manual-break t))
#+end_src
** org-pdfview
#+begin_src emacs-lisp
  (use-package org-pdfview
    :after org pdf-tools)
#+end_src
** org-beamer
#+begin_src emacs-lisp
  (use-package ox-latex
    :after org
    :ensure nil
    :config
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass\[presentation\]\{beamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
#+end_src
** org-ref
#+begin_src emacs-lisp
  (use-package org-ref
    :bind ("C-c j" . org-ref-bibtex-hydra/body)
    :after org
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite
          org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
          reftex-default-bibliography '("~/SurfDrive/bibliography/references.bib")
          org-ref-bibliography-notes '("~/SurfDrive/bibliography/notes/notes.org")
          org-ref-default-bibliography '("~/SurfDrive/bibliography/references.bib")
          org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
          org-ref-notes-directory "~/SurfDrive/bibliography/notes/"
          org-ref-notes-function 'orb-edit-notes
          ;; org-ref-pdf-directory '("~/SurfDrive/bibliography/bibtex-pdfs/")
          bibtex-completion-pdf-open-function 'org-open-file)
    :config
    (require 'org-ref)
    (require 'doi-utils)
    (require 'org-id)
    (require 'org-ref-wos)
    (require 'org-ref-scopus)
    (require 'org-ref-pubmed)
    (require 'org-ref-sci-id)
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator "-"
          bibtex-autokey-titleword-separator "-"
          bibtex-autokey-titlewords 0
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5)
    ;; (add-to-list 'org-ref-bibtex-journal-abbreviations
    ;;                '("JIR" "Journal of Irreproducible Research" "J. Irrep. Res."))
    (require 'org-ref-scopus))
#+end_src
*** open zotero pdf at point
from [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#a-note-for-mendeley-jabref-and-zotero-users][the manual]]
#+begin_src emacs-lisp
  (setq bibtex-completion-pdf-field "file")

  (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
      (key (car results))
      (pdf-file (car (bibtex-completion-find-pdf-in-field key))))
      (if (file-exists-p pdf-file)
         (org-open-file pdf-file)
        (message "No PDF found for %s" key))))

  (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
  ;; (setq org-ref-get-pdf-filename-function 'bibtex-completion-find-pdf-in-field)

  (global-set-key (kbd "<f8>") 'my/org-ref-open-pdf-at-point)
#+end_src
** COMMENT deft
:LOGBOOK:
- Note taken on [2020-07-15 Wed 16:09] \\
  added it based on [[file:~/SurfDrive/bibliography/notes//20200715160129-an_orgmode_note_workflow.org][An Orgmode Note Workflow]]
:END:
#+begin_src emacs-lisp :eval never :tangle no
(use-package deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        ;; de-couples filename and note title:
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        ;; disable auto-save
        deft-auto-save-interval -1.0
        ;; converts the filter string into a readable file-name using kebab-case:
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :config
  (add-to-list 'deft-extensions "tex"))
#+end_src

** org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :after (:any org pdf-view)
    :config
    (setq
     ;; org-noter-notes-window-location 'horizontal-split
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     org-noter-notes-search-path (list org_notes)))
#+end_src

** mpv
play videos from orgmode!
#+begin_src emacs-lisp
  (use-package mpv
    :hook
    (org-open-at-point-functions . mpv-seek-to-position-at-point)
    :config
    (org-add-link-type "mpv" #'mpv-play)
    (defun org-mpv-complete-link (&optional arg)
      (replace-regexp-in-string
       "file:" "mpv:"
       (org-file-complete-link arg)
       t t)))
#+end_src
it's not working so far

** play bell sound when task is marked as done
from [[https://stackoverflow.com/questions/15345614/how-to-get-emacs-org-mode-to-play-sound-file-on-done-state][this stackoverflow post]]
#+begin_src emacs-lisp
  (add-hook 'org-after-todo-state-change-hook 'my-org-after-todo-state-change)
  (defun my-org-after-todo-state-change ()
    (when (or (string-equal org-state "DONE")
              (string-equal org-state "CANC"))
      (org-clock-out-if-current)
      (play-sound-file "~/bell.au")))
#+end_src
** COMMENT pdf preview in org
#+begin_src emacs-lisp :eval never :tangle no
  ; (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  ; (add-to-list 'image-file-name-extensions "pdf")
  ; (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit)
  ;       org-image-actual-width t)
#+end_src
* writing
** COMMENT spell-fu
#+begin_src emacs-lisp
  (use-package spell-fu
    :hook (org-mode . (lambda()
                        (setq spell-fu-faces-exclude
                              '(org-meta-line org-link org-code))
                        (spell-fu-mode))))
#+end_src
** easy symbol insertion
By default C-x 8 o = ° and C-x 8 m = µ. So:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 8 a") (lambda () (interactive) (insert "α")))
  (global-set-key (kbd "C-x 8 b") (lambda () (interactive) (insert "β")))
  (global-set-key (kbd "C-x 8 d") (lambda () (interactive) (insert "δ")))
  (global-set-key (kbd "C-x 8 D") (lambda () (interactive) (insert "Δ")))
#+end_src
I also use compose-key, mapped to right alt with some custom settings for
<ralt> g d, resulting in δ, for example.
** all-the-icons
https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (setq inhibit-compacting-font-caches t)
#+end_src
** all-the-icons-ivy
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy
    :config
    (all-the-icons-ivy-setup))
#+end_src
** emojify-mode
#+begin_src emacs-lisp
  (use-package emojify
    :config (setq emojify-emoji-styles 'unicode)
    :hook ((mu4e-mode mu4e-view-mode mu4e-compse-mode org-mode) . emojify-mode))
#+end_src
** yasnippet
usefull snippets for me: org-mode (fig_, )
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    :config
    (setq yas-indent-line t))
#+end_src
** ispell: spell-checking
#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setq ispell-dictionary "british-ize-w_accents"))
#+end_src
** flyspell
#+begin_src emacs-lisp
  (use-package flyspell
    :hook ((text-mode-hook . flyspell-mode)
           (prog-mode-hook . flyspell-prog-mode))
    :config
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_example " . "#\\+end_example$"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXAMPLE " . "#\\+END_EXAMPLE$")))
#+end_src
** visual-fill-column-mode
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (visual-line-mode . visual-fill-column-mode)
    :config
    (setq-default visual-fill-column-width 115
                  split-window-preferred-function 'visual-fill-column-split-window-sensibly
                  visual-fill-column-center-text t))
#+end_src
* reading and annotating pdfs
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :load-path "/usr/share/emacs/site-lisp/pdf-tools"
    :init
    (pdf-tools-install)
    :config
    ;(pdf-loader-install)
    (setq-default pdf-view-display-size 'fit-width)
    :bind
    ;; swiper doesn't play nice with pdf-tools, so I disable it.
    (:map pdf-view-mode-map ("C-s" . isearch-forward)))
#+end_src
* swiper
very nice search replacement
#+begin_src emacs-lisp
  (use-package swiper
    :init (ivy-mode 1)
    :config
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) ")
    :bind
    ("\C-s" . swiper)
    ("C-c C-r" . ivy-resume)
    ("C-c v" . ivy-push-view)
    ("C-c V" . ivy-pop-view))
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :init (counsel-mode 1)
    :bind
    ("C-x l" . counsel-locate)
    ("C-c g" . counsel-git)
    ("M-x" . counsel-M-x)
    ("C-c s" . counsel-rg))
#+end_src
** company
See https://iqss.github.io/IQSS.emacs/init.html#auto-complete_configuration for where I got it from.
#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :config
    (setq ;; company-require-match nil
          ;; company-async-timeout 6
          ;; company-idle-delay 5 ;; default 0.5,
          ;; company-minimum-prefix-length 1 ;; default 3
          company-global-modes '(not term-mode))
    (require 'company-capf)
    (require 'company-files)
    (require 'company-math)
    (setq company-backends '(company-files company-math-symbols-unicode company-capf))
    (setq-default company-backends '(company-files company-math-symbols-unicode company-capf))
    (setq tab-always-indent 'complete)
    :bind
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("<tab>" . company-complete-common)
          ("<backtab>" . company-select-previous))
    (:map company-mode-map
          ([remap indent-for-tab-command] . company-indent-or-complete-common)
          ("C-M-i" . company-complete)
          ("C-M-S-i" . counsel-company)))
#+end_src

** emacs-pkgbuild-mode
Install it with Pacman
#+begin_src bash :results none :exports code :eval never
sudo pacman -S emacs-pkgbuild-mode
#+end_src

Then load it into emacs when opening a PKGBUILD file
#+begin_src emacs-lisp
  (use-package pkgbuild-mode
     :ensure nil
     :load-path "/usr/share/emacs/site-lisp/"
     :mode "/PKGBUILD$")
#+end_src
** systemd
#+begin_src emacs-lisp
  (use-package systemd)
#+end_src
** calendar
perhaps change keybindings a little: [[https://github.com/emacs-evil/evil-collection/issues/211][evil-collection issue]]
#+begin_src emacs-lisp
  (use-package calfw)
  (use-package calfw-org
    :config
    (setq cfw:display-calendar-holidays nil
          calendar-week-start 1)
    :bind
    ("C-c o" . cfw:open-org-calendar))
#+end_src
* email
** smtp
#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :config
    (setq message-send-mail-function 'smtpmail-send-it
          send-mail-function 'smtpmail-send-it
          user-mail-address "<your-email-address>"
          smtpmail-default-smtp-server "<your-smtp-server>"
          smtpmail-smtp-server "<your-smtp-server>"
          smtpmail-smtp-service 587
          smtp-stream-type 'starttls
          smtpmail-smtp-user "<your-user-id>"
          smtpmail-starttls-credentials
          '(("<your-smtp-server>" 587 "<possibly-domain>/<your-user-id>" nil))
          starttls-use-gnutls t
          starttls-gnutls-program "gnutls-cli"
          starttls-extra-args nil))
#+end_src
** mu4e
install it with pacman ~mu~
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :commands mu4e
    :bind (("C-c m" . mu4e)
           :map mu4e-headers-mode-map
           ("C-c c" . org-mu4e-store-and-capture)
           :map mu4e-view-mode-map
           ("C-c c" . org-mu4e-store-and-capture))
    :init
    (require 'mu4e)  ;; somehow this is needed, because otherwise calling org-store-link doesn't work
    (require 'org-mu4e)
    (setq mu4e-drafts-folder "/Drafts"
          mu4e-sent-folder "/Sent Items"
          mu4e-trash-folder "/Deleted Items")
    (setq mu4e-maildir-shortcuts
          '(("/inbox" . ?i)
            ("/NEXT" . ?n)
            ("/Waiting" . ?w)
            ("/Deferred" . ?d)
            ("/news" . ?m)
            ("/Important backlog" . ?l)
            ("/Sent Items" . ?s)
            ("/archive" . ?r)))
    (setq mu4e-change-filenames-when-moving t) ; important for isync
    (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
    (setq mu4e-headers-fields
          '((:date          .  17)
            (:flags         .   5)
            (:from          .  22)
            (:subject       .  nil)))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-headers-include-related t)
    (setq mu4e-compose-format-flowed t)  ; plain-text nice to read on phone
    (setq mu4e-confirm-quit nil)
    (setq mu4e-view-show-images t)
    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    ;; (add-to-list 'mu4e-view-actions
    ;; '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (setq org-mu4e-link-query-in-headers-mode nil))
#+end_src
* science packages
** eval-in-repl
from: https://iqss.github.io/IQSS.emacs/init.html#general_repl_(comint)_config
use other programming languages in interactive environment, similar to how ESS does it
#+begin_src emacs-lisp
  (use-package eval-in-repl
    :hook (comint-mode . (lambda() (setq truncate-lines 1)))
    :config
    (setq comint-process-echoes t
      eir-repl-placement 'below)
    (setq comint-scroll-to-bottom-on-input t)
    (setq comint-scroll-to-bottom-on-output t)
    (setq comint-move-point-for-output t))
#+end_src
** ess
emacs speaks statistics, work with R etc.
*** insert pipe %>% function
#+begin_src emacs-lisp
  (defun japhir/insert-r-pipe ()
    "Insert the pipe operator in R, %>%"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))
#+end_src
*** use-package
#+begin_src emacs-lisp
  (use-package ess
    :load-path "/usr/share/emacs/site-lisp/ess"
    :init (require 'ess-site)  ;; seems like this is needed to load the minor modes as well keybindings don't work without it
    ;; :hook ((ess-r-mode inferior-ess-r-mode) . electric-layout-mode)  ;; commented out since new curly-curly operator for rlang
    :commands R
    :bind (:map ess-r-mode-map
           (";" . ess-insert-assign)
           ;; RStudio equivalents
           ("M--" . ess-insert-assign)
           ("C-S-m" . japhir/insert-r-pipe)
           :map inferior-ess-r-mode-map
           (";" . ess-insert-assign)
           ("M--" . ess-insert-assign)
           ("C-S-m" . japhir/insert-r-pipe))
    :config
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (or (string= lang "R")
               (string= lang "elisp")
               (string= lang "emacs-lisp")
               (string= lang "latex"))))
    (setq ;; display-buffer-alist
          ;; '(("*R"
          ;;    (display-buffer-reuse-window display-buffer-pop-up-frame)
          ;;    (reusable-frames . 0)))
          ;; ess-help-own-frame 'one
          ;; ess-auto-width 'frame
          org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate
          ess-style 'RStudio
          ess-use-auto-complete nil
          ess-use-company t
          ess-indent-with-fancy-comments nil
          ess-pdf-viewer-pref 'emacsclient
          inferior-R-args "--no-restore-history --no-save"
          ess-ask-for-ess-directory nil
          ess-R-font-lock-keywords
          (quote
           ((ess-R-fl-keyword:modifiers)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:keywords . t)
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-R-fl-keyword:fun-cals . t)
            (ess-R-fl-keyword:numbers)
            (ess-R-fl-keyword:operators . t)
            (ess-R-fl-keyword:delimiters)
            (ess-R-fl-keyword:=)
            (ess-R-fl-keyword:F&T)))))
#+end_src
*** electric-spacing operator
Put spaces around operators such as +, -, etc.
#+begin_src emacs-lisp
  (use-package electric-operator
    :hook ((R-mode ess-r-mode inferior-ess-r-mode). electric-operator-mode)
    ;; attempts at getting curly-curly to instert {{ <cursor> }}, below inserts {{{ }}
    ;; :config
    ;; (electric-operator-add-rules-for-mode 'ess-r-mode
                                          ;; (cons "{{" "{{ "))
                                          ;; (cons "}" " }"))
    :custom
    (electric-operator-R-named-argument-style 'spaced))
#+end_src
** markdown-mode
markdown mode for writing
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src
** polymode
for working with .Rmd files etc.
#+begin_src emacs-lisp
  (use-package polymode)
  (use-package poly-markdown)
  ;; (use-package poly-R)
#+end_src
** matlab
if I'm ever required to work in non-open-source
#+begin_src emacs-lisp
  (use-package matlab
    :ensure nil
    :init (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
    :mode ("\\.m\\'" . matlab-mode)
    :interpreter "matlab"
    :config
    (setq matlab-indent-function t)
    (setq matlab-indent-function "matlab"))
#+end_src
** pandoc-mode
exporting markdown
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :ensure t
    :hook (markdown-mode . pandoc-mode))
#+end_src
** mermaid
#+begin_src emacs-lisp
  (use-package ob-mermaid
    :config
    (setq ob-mermaid-cli-path "~/node_modules/.bin/mmdc"))
#+end_src
** org-pandoc
https://github.com/kawabata/ox-pandoc
#+begin_src emacs-lisp
    (use-package ox-pandoc
      :config
      (setq org-pandoc-options '((bibliography
            . "/home/japhir/Documents/References/PhD.bib"))
            ;; org-pandoc-options-for-docx '((reference-docx
            ;; . "/home/japhir/SurfDrive/PhD/chapters/wordtemplate.docx"))
            ))
#+end_src
** LaTeX (AUCTeX, RefTeX)
for working with \LaTeX
#+begin_src emacs-lisp
  ;(load "auctex.el" nil t t)
  ;(load "preview-latex.el" nil t t)
  (use-package tex
    :load-path "/usr/share/emacs/site-lisp/auctex/"
    :hook
    (LaTeX-mode . turn-on-reftex)
    (LaTeX-mode . turn-on-auto-fill)
    (LaTeX-mode . prettify-symbols-mode)
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq reftex-plug-into-AUCTeX t))
#+end_src
** COMMENT hl-todo
hmm it does overwrite my nice highlighting of NEXT
#+begin_src emacs-lisp
  (use-package hl-todo
    :bind (:map hl-todo-mode-map
                ("C-c k" . hl-todo-previous)
                ("C-c j" . hl-todo-next))
    :hook
    ((LaTeX-mode ess-mode ess-r-mode org-mode) . hl-todo-mode))
#+end_src
** bibtex/ivy-bibtex
reference manager I use it in conjunction with zotero, which generates the
.bib files, and org-ref, to insert citations in org files.
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :config
    ;; (autoload 'ivy-bibtex "ivy-bibtex" "" t)
    (require 'ivy-bibtex)
    (setq bibtex-completion-bibliography
          '("/home/japhir/SurfDrive/bibliography/references.bib"
            "/home/japhir/Documents/References/PhD.bib")))
#+end_src
* secret directories
These are all the settings that require secret directories, such as my org
agenda files and google calendar. They overwrite the settings with "<...>"
syntax above.
#+begin_src emacs-lisp
  ;; (use-package emacsdirs)
  (load "~/.emacs.d/secretdirs.el" t)
#+end_src
* reset gc-cons-threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1)
#+end_src
