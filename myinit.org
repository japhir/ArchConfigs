#+title: My Literate emacs config
This is my config file for [[https://www.gnu.org/software/emacs/][emacs]]!

* [#A] WARNING: migration in progress!
<2023-06-05 Mon>
I'm trying to clean up this biiiiiig file and simplify as needed.

I'm using https://github.com/SystemCrafters/crafted-emacs as a base for a new config!

For now, I'm going to start editing [[file:~/.config/emacs/early-init.el]] and
[[file:~/.config/emacs/init.el]] directly, without the org-mode wrapper around it!

The new config is located in [[file:emacs/]], because I've also migrated to using
the XDG config directory for emacs (meaning I have symlinked the files there to
~~/.config/emacs/~).

By default this file, located in ~~/.emacs.d/myinit.el~, will be used to launch
my emacs daemon.

If I want to try out the new config, I should launch emacs with:
#+begin_src shell
  emacs --debug-init --init-directory=/home/japhir/.config/emacs/
#+end_src

I will keep this massive org file around until I've taken all the useful things out of it.

* speedups
** gc-cons threshold
The gc-cons-threshold is set to a superlarge number for faster startup time. It
is reset at [[*reset gc-cons-threshold][reset gc-cons-threshold]].

#+begin_src emacs-lisp
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)
#+end_src

** DONE COMMENT report gc-cons threshold behaviour to maintainers
CLOSED: [2023-07-13 Thu 11:16] SCHEDULED: <2023-07-12 Wed>
#+begin_src emacs-lisp :tangle no
  (require 'emacs-gc-stats)
  ;; Optionally reset Emacs GC settings to default values (recommended)
  (setq emacs-gc-stats-gc-defaults 'emacs-defaults)
  ;; Optionally set reminder to upload the stats after 3 weeks.
  (setq emacs-gc-stats-remind t) ; can also be a number of days
  ;; Optionally disable logging the command names
  ;; (setq emacs-gc-stats-inhibit-command-name-logging t)
  (emacs-gc-stats-mode +1)
#+end_src

whoops I had not disabled the lowest codeblock that sets the threshold to something.
** make long lines faster
I like to write my org-mode scientific papers such that each line has one sentence.
This allows me to make more meaningful git commits per line.
Often, these lines are quite long, however, and this makes emacs very slow.
https://emacs.stackexchange.com/questions/598/how-do-i-prevent-extremely-long-lines-making-emacs-slow
#+begin_src emacs-lisp
  (setq-default bidi-paragraph-direction 'left-to-right)
  (setq-default bidi-inhibit-bpa t)
  (global-so-long-mode 1)
  ;; (setq-default bidi-display-reordering nil)  ;; officially unsupported
#+end_src

* COMMENT log startup time
stolen from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance][David Wilson's config]]
#+begin_src emacs-lisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src
* package archive
** COMMENT setup package archive in init.el
this is handled in [[file:~/.emacs.d/init.el]]
#+begin_src emacs-lisp
  (let ((file-name-handler-alist nil))
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (package-initialize)
    (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org"))
    (setq custom-file "~/.emacs.d/emacs-custom.el")
    (load custom-file))
  (put 'erase-buffer 'disabled nil)
#+end_src
** use-package
Use-package is an amazing resource to clean up my init file and have it play
nice on both my desktop and laptop.
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
  (use-package diminish)  ; to abbreviate lines from the mode-line
  (use-package delight)  ; to omit lines from the mode-line
  (use-package bind-key)  ; for easy keybindings
#+end_src
** COMMENT quelpa
#+begin_src emacs-lisp :tangle no
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+end_src
** COMMENT straight.el
#+begin_src emacs-lisp :tangle no
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** COMMENT automatic package updates
from the [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#automatic-package-updates][emacs from scratch]] series
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-at-time "09:00"))
#+end_src

* dirvar
define dirvars 'org-in-file', 'org-gtd-file', etc.
#+begin_src emacs-lisp
  (defvar org-in-file "~/org/inbox.org"
    "GTD Inbox")
  (defvar org-gtd-file "~/org/todo.org"
    "Personal TODO's")
  (defvar org-tickler-file "~/org/tickler.org"
    "Tickler")
  (defvar org-clumped-file "~/org/clumpednotes.org"
    "Work TODO's")
  (defvar org-notes-file "~/org/notes.org"
    "General Notes and Protocols")
  (defvar org-someday-file "~/org/someday.org"
    "Someday/Maybe")
  (defvar org-journal-file "~/org/journal.org"
    "Journal")
  (defvar org-lists-file "~/org/lists.org"
    "Lists of Movies etc.")
  (defvar org-cal-file "~/org/calendars/gcal.org"
    "Google Calendar")
  (setq my/org-roam-files
        (directory-files "~/SurfDrive/bibliography/notes/daily" t "org$"))
#+end_src
* interface
** turn off UI elements and small tweaks
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  ;; (setq initial-major-mode 'org-mode)
  (setq large-file-warning-threshold 100000000) ;; change to ~100 MB
  (scroll-bar-mode -1)   ; turn off the scroll bar
  (tool-bar-mode -1)     ; turn off the tool bar
  (menu-bar-mode -1)     ; turn off the menu
  (setq visible-bell 1)  ; turn off beeps, make them flash!
  (global-hl-line-mode t)
  ;; typing
  (setq-default fill-column 79)
  (setq sentence-end-double-space nil)
  ;; typed text will replace highlighted region
  (delete-selection-mode 1)
  ;; backspace deletes one character instead of one column
  (global-set-key (kbd "DEL") 'backward-delete-char)
  ;; remove trailing whitespace before save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; prefer utf-8
  (prefer-coding-system 'utf-8-unix)

  (blink-cursor-mode 0)
  ;; (setq mouse-wheel-progressive-speed nil)

  ;; automatically re-open files that have been changed on disk
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)

  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq use-dialog-box nil) ; do not use graphical ui dialog boxes but use echo area (esp. for org-pomodoro)

  ;; always follow symlinks w/o asking
  (require 'vc-hooks)
  (setq vc-follow-symlinks t)
#+end_src
** auto-save
#+begin_src emacs-lisp
  (setq auto-save-default t  ;; let's try autosave for a while
        backup-inhibited t
        confirm-nonexistent-file-or-buffer nil
        create-lockfiles nil)
#+end_src

** auto-save when I exit normal mode
#+begin_src emacs-lisp
  (defun my-save-if-bufferfilename ()
    (if (buffer-file-name)
        (progn (save-buffer))
          (message "no file is associated to this buffer: do nothing")))
  ;; this may be a bit too slow, especially with my whitespace remove hook.
  ;(add-hook 'evil-insert-state-exit-hook 'my-save-if-bufferfilename)
#+end_src

** history
#+begin_src emacs-lisp
  (recentf-mode 1)
  ;; Save what you enter into minibuffer prompts
  (setq history-length 25)
  (savehist-mode 1)
  ;; Remember and restore the last cursor location of opened files
  (save-place-mode 1)
#+end_src
** COMMENT frames-only-mode
let my window manager handle screen creation
#+begin_src emacs-lisp :tangle no
  (use-package frames-only-mode
    :custom (frames-only-mode nil))
#+end_src
** default-text-scale
use C-M-= and C-M-- to increase/decrease font size globally.
#+begin_src emacs-lisp
  (use-package default-text-scale
    :custom (default-text-scale-mode t))
#+end_src
** play nice with parentheses
#+begin_src emacs-lisp
  (electric-pair-mode 1) ; auto-insert matching bracket
  (show-paren-mode 1)    ; turn on paren match highlighting
#+end_src
*** COMMENT smartparens
https://github.com/Fuco1/smartparens
insert matching parentheses and jump across them

it's been pretty slow and annoying for pasting stuff in R live repls
#+begin_src emacs-lisp
  (use-package smartparens
    :hook ((prog-mode markdown-mode org-mode inferior-ess-mode inferior-ess-r-mode) . turn-on-smartparens-strict-mode)
    :config (show-smartparens-global-mode t))
#+end_src
*** COMMENT evil-smartparens
https://github.com/expez/evil-smartparens
#+begin_src emacs-lisp
  (use-package evil-smartparens
    :after evil
    :hook (smartparens-enabled . evil-smartparens-mode))
#+end_src
* change appearance
** line spacing, underline
#+begin_src emacs-lisp
  (setq-default line-spacing 0)
  (setq x-underline-at-descent-line t)
#+end_src
** rainbow-delimiters
matching parenthesis are highlighted with rainbow colours.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode LaTeX-mode) . rainbow-delimiters-mode))
#+end_src
** set the theme
*** COMMENT clean up previous theme
from this [[https://explog.in/dot/emacs/config.html][config]] from [[https://www.reddit.com/r/emacs/comments/4mzynd/what_emacs_theme_are_you_currently_using/d43c5cw][reddit]]
#+begin_src emacs-lisp
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
#+end_src
*** prot's modus themes
#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    (setq modus-themes-bold-constructs t
          modus-themes-italic-constructs t
          modus-themes-mixed-fonts t
          modus-themes-subtle-line-numbers t
          modus-themes-tabs-accented t
          modus-themes-variable-pitch-ui t
          modus-themes-inhibit-reload t
          modus-themes-fringes '(subtle)
          modus-themes-lang-checkers nil
          modus-themes-mode-line '(4)
          modus-themes-markup '(background italic)
          modus-themes-syntax '(faint)
          modus-themes-intense-hl-line '(accented)
          modus-themes-paren-match '(bold intense)
          modus-themes-links '(neutral-underline background)
          modus-themes-prompts '(intense bold)
          modus-themes-completions '(opinionated)
          modus-themes-mail-citations nil
          modus-themes-region '(bg-only no-extend)
          modus-themes-diffs '(desaturated)
          modus-themes-org-blocks 'tinted-background
          modus-themes-org-agenda
          '((header-block . (variable-pitch 1.3))
            (header-date . (grayscale workaholic bold-today 1.1))
            (event . (accented varied))
            (scheduled . rainbow)
            (habit . traffic-light))
          modus-themes-headings
          '((1 . (variable-pitch 1.3))
            (2 . (variable-pitch 1.1))
            (3 . (variable-pitch semibold)))))
#+end_src
*** circadian: dark theme at night, light theme during the day
#+begin_src emacs-lisp
  (use-package circadian
    :custom
    ;; current location on earth for auto toggle between light and dark theme
    (calendar-latitude 52.08) ;; Utrecht
    (calendar-longitude 5.11)
    ;; (calendar-latitude 21.25) ;; Honolulu
    ;; (calendar-longitude -157.8)
    ;; (calendar-latitude 40.5) ;; New York
    ;; (calendar-longitude -74.5)
    (circadian-themes '((:sunrise . modus-operandi)
                        (:sunset  . modus-vivendi)))
    :config
    (circadian-setup))
#+end_src
** set variable font
#+begin_src emacs-lisp
  ;; (set-face-attribute 'default nil :family "Noto Mono" :height 130)
  (set-face-attribute 'default nil :family "Noto Sans Mono" :height 150)
  (set-face-attribute 'variable-pitch nil :family "Noto Serif" :height 1.0)
  ;;Tex Gyre Pagella
  (set-face-attribute 'fixed-pitch nil :family "Noto Sans Mono" :height 1.0)
#+end_src

#+RESULTS:

** rainbow-mode
Highlight hex colours!
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :defer t
    :hook (html-mode r-mode))
#+end_src
** emojify
Show plain-text emoji like ~:)~ as images, but also unicode ~☺~ and ~:slight-smile:~. :D
https://github.com/iqbalansari/emacs-emojify
#+begin_src emacs-lisp
    (use-package emojify
      :init (global-emojify-mode))
#+end_src
** COMMENT pulse
Highlight the current line when changing focus. It's like beacon-mode but native!
from https://karthinks.com/software/batteries-included-with-emacs/
#+begin_src emacs-lisp
  (defun pulse-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

  (dolist (command '(scroll-up-command scroll-down-command
                     recenter-top-bottom other-window))
    (advice-add command :after #'pulse-line))
#+end_src
** visual-fill-column-mode
This allows me to write nicely on a widescreen monitor in a single buffer.
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . visual-fill-column-mode)
    :custom
    (global-visual-line-mode t)
    ;; (global-visual-fill-column-mode t)
    ;; (visual-fill-column-width 115) ;; instead prefer fill-column-width
    (split-window-preferred-function 'visual-fill-column-split-window-sensibly)
    (visual-fill-column-center-text t))
#+end_src
** define new org-todo faces
*** org-todo-next
#+begin_src emacs-lisp
  (defface org-todo-next
    '((((class color) (min-colors 16) (background light))
       (:family "Noto Sans Mono" :foreground "light goldenrod yellow"
		:bold t :background "red"))
      (((class color) (min-colors 16) (background dark))
       (:family "Noto Sans Mono" :foreground "light goldenrod yellow"
		:bold t :background "red"))
      (((class color) (min-colors 8) (background light))
       (:family "Noto Sans Mono" :foreground "light goldenrod yellow"
		:bold t :background "red"))
      (((class color) (min-colors 8) (background dark))
       (:family "Noto Sans Mono" :foreground "light goldenrod yellow"
		:bold t :background "red"))
      (t (:inverse-video t :bold t)))
      "Face for NEXT TODO keyword"
      :group 'org-faces)
#+end_src

*** org-todo-waiting
#+begin_src emacs-lisp
  (defface org-todo-waiting
    '((((class color) (min-colors 16) (background light))
       (:family "Noto Sans Mono" :foreground "dim gray" :bold t
       :background "yellow"))
      (((class color) (min-colors 16) (background dark))
       (:family "Noto Sans Mono" :foreground "dim gray" :bold t
       :background "yellow"))
      (((class color) (min-colors 8) (background light))
       (:family "Noto Sans Mono" :foreground "dim gray" :bold t
       :background "yellow"))
      (((class color) (min-colors 8) (background dark))
       (:family "Noto Sans Mono" :foreground "dim gray" :bold t
       :background "yellow"))
      (t (:inverse-video t :bold t)))
    "Face for WAIT TODO keyword"
    :group 'org-faces)
#+end_src

*** org-todo-tick
#+begin_src emacs-lisp
  (defface org-todo-tick
    '((((class color) (min-colors 16) (background light))
       (:family "Noto Sans Mono" :bold t :background "light slate blue"))
      (((class color) (min-colors 16) (background dark))
       (:family "Noto Sans Mono" :bold t :background "light slate blue"))
      (((class color) (min-colors 8)  (background light))
       (:family "Noto Sans Mono" :bold t :background "light slate blue"))
      (((class color) (min-colors 8)  (background dark))
       (:family "Noto Sans Mono" :bold t :background "light slate blue"))
      (t (:inverse-video t :bold t)))
    "Face for TICK TODO keyword"
    :group 'org-faces)
#+end_src

*** org-todo-someday
#+begin_src emacs-lisp
  (defface org-todo-someday
    '((((class color) (min-colors 16) (background light))
       (:family "Noto Sans Mono" :foreground "ghost white" :bold t
       :background "deep sky blue"))
      (((class color) (min-colors 16) (background dark))
       (:family "Noto Sans Mono" :foreground "ghost white" :bold t
       :background "deep sky blue"))
      (((class color) (min-colors 8) (background light))
       (:family "Noto Sans Mono" :foreground "ghost white" :bold t
       :background "deep sky blue"))
      (((class color) (min-colors 8) (background dark))
       (:family "Noto Sans Mono" :foreground "ghost white" :bold t
       :background "deep sky blue"))
      (t (:inverse-video t :bold t)))
    "Face for SOME TODO keyword"
    :group 'org-faces)
#+end_src

*** org-done-done
#+begin_src emacs-lisp
  (defface org-done-done
    '((((class color) (min-colors 16) (background light))
       (:family "Noto Sans Mono" :foreground "green4" :bold t
       :background "pale green"))
      (((class color) (min-colors 16) (background dark))
       (:family "Noto Sans Mono" :foreground "green4" :bold t
       :background "pale green"))
      (((class color) (min-colors 8))
       (:family "Noto Sans Mono" :foreground "green"
       :background "pale green"))
      (t (:bold t)))
    "Face used for todo keywords that indicate DONE items."
    :group 'org-faces)
#+end_src
*** org-done-cancelled
#+begin_src emacs-lisp
  (defface org-done-cancelled
    '((((class color) (min-colors 16) (background light))
       (:family "Noto Sans Mono" :foreground "dim gray" :bold t
       :background "gray"))
      (((class color) (min-colors 16) (background dark))
       (:family "Noto Sans Mono" :foreground "dim gray" :bold t
       :background "gray"))
      (((class color) (min-colors 8))
       (:family "Noto Sans Mono" :foreground "dim gray"
       :background "gray"))
      (t (:bold t)))
    "Face used for todo keywords that indicate CANC items."
    :group 'org-faces)
#+end_src
** COMMENT svg-tag-mode
#+begin_src emacs-lisp
  (require 'svg-tag-mode)

  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")

  (defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                      nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag (concat value "%")
                             nil :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag value nil
                               :stroke 0 :margin 0)) :ascent 'center)))

  (setq svg-tag-tags
        `(
          ;; Org tags
          (":\\([@A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
          (":\\([@A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))

          ;; Task priority
          ("\\[#[A-Z]\\]" . ( (lambda (tag)
                                (svg-tag-make tag :face 'org-priority
                                              :beg 2 :end -1 :margin 0))))

          ;; Progress
          ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                              (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                            (svg-progress-count (substring tag 1 -1)))))

          ;; TODO states
          ("NEXT" . ((lambda (tag)
                       (svg-tag-make "NEXT" :face todo-next :margin 0))))
          ("WAIT" . ((lambda (tag)
                       (svg-tag-make "WAIT" :face 'org-todo-waiting :margin 0))))
          ("TICK" . ((lambda (tag)
                       (svg-tag-make "TICK" :face 'org-todo-tick :margin 0))))
          ("SOME" . ((lambda (tag)
                       (svg-tag-make "SOME" :face 'org-todo-someday :margin 0))))
          ("CANC" . ((lambda (tag)
                       (svg-tag-make "CANC" :face 'org-done-cancelled :margin 0))))
          ("DONE" . ((lambda (tag)
                       (svg-tag-make "DONE" :face 'org-done-done :margin 0))))

          ;; Citation of the form [cite:&Knuth:1984]
          ("\\(\\[cite:&[A-Za-z]+:\\)" . ((lambda (tag)
                                            (svg-tag-make tag
                                                          :inverse t
                                                          :beg 7 :end -1
                                                          :crop-right t))))
          ("\\[cite:&[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                     (svg-tag-make tag
                                                                   :end -1
                                                                   :crop-left t))))


          ;; Active date (without day name, with or without time)
          (,(format "\\(<%s %s>\\)" date-re day-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0))))
          (,(format "\\(<%s *%s *\\)%s>" date-re day-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
          (,(format "<%s *%s *\\(%s>\\)" date-re day-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

          ;; Inactive date  (without day name, with or without time)
          (,(format "\\(\\[%s *%s *\\]\\)" date-re day-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
          (,(format "\\(\\[%s *%s *\\)%s\\]" date-re day-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
          (,(format "\\[%s *%s *\\(%s\\]\\)" date-re day-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))))
#+end_src

* version control
** diff-hl
Highlight diffs of current version-controlled buffer in the margin. Quite cool!
#+begin_src emacs-lisp
  (use-package diff-hl
    :init
    (global-diff-hl-mode)
    (setq diff-hl-gutter-mode t)
    (diff-hl-flydiff-mode +1)
    :hook (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src
** magit
git porcelain, essential!
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :config
    (customize-set-variable 'magit-diff-refine-hunk t)
    ;; :after with-editor
    )
#+end_src
** org-make-toc for publishing table of contents on github
https://github.com/alphapapa/org-make-toc
#+begin_src emacs-lisp
  (use-package org-make-toc)
#+end_src
* browsing the documentation
** helpful
beautiful help functions
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
    (use-package helpful
       :commands (helpful-callable helpful-function helpful-variable helpful-mode))
#+end_src
** demos
Insert demos after describe function https://github.com/xuchunyang/elisp-demos
#+begin_src emacs-lisp
  (use-package elisp-demos
    :after helpful
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src
* custom functions/keyboard shortcuts
** revert buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src
** fetch calendar
#+begin_src emacs-lisp
  (defun fetch-calendar ()
    (when (internet-up-p) (org-gcal-fetch)))
#+end_src
** org-agenda recent open loops
#+begin_src emacs-lisp
  (defun my-org-agenda-recent-open-loops ()
    (interactive)
    (let ((org-agenda-start-with-log-mode t)
          (org-agenda-use-time-grid nil))
      (fetch-calendar)
      (org-agenda-list nil (org-read-date nil nil "-2d") 4)
      (beginend-org-agenda-mode-goto-beginning)))
#+end_src
** COMMENT edit heading in indirect buffer
[[https://www.reddit.com/r/orgmode/comments/fuvdqv/org_notetaking_workflow_with_orgroam/fmhl3ml?utm_source=share&utm_medium=web2x][taken from this reddit thread by alphapapa]]
I haven't used this at all.
#+begin_src emacs-lisp
  (defun ap/org-tree-to-indirect-buffer (&optional arg)
    "Create indirect buffer and narrow it to current subtree.
  The buffer is named after the subtree heading, with the filename
  appended.  If a buffer by that name already exists, it is
  selected instead of creating a new buffer."
    (interactive "P")
    (let* ((new-buffer-p)
           (pos (point))
           (buffer-name (let* ((heading (org-get-heading t t))
                               (level (org-outline-level))
                               (face (intern (concat "outline-" (number-to-string level))))
                               (heading-string (propertize (org-link-display-format heading)
                                                           'face face)))
                          (concat heading-string "::" (buffer-name))))
           (new-buffer (or (get-buffer buffer-name)
                           (prog1 (condition-case nil
                                      (make-indirect-buffer (current-buffer) buffer-name 'clone)
                                    (error (make-indirect-buffer (current-buffer) buffer-name)))
                             (setq new-buffer-p t)))))
      (switch-to-buffer new-buffer)
      (when new-buffer-p
        ;; I don't understand why setting the point again is necessary, but it is.
        (goto-char pos)
        (rename-buffer buffer-name)
        (org-narrow-to-subtree))))

  (advice-add 'org-tree-to-indirect-buffer :override 'ap/org-tree-to-indirect-buffer)
#+end_src
** get-labels in current buffer
from [[https://kitchingroup.cheme.cmu.edu/blog/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links/][JKitchin's blog]]
#+begin_src emacs-lisp
  (defun get-labels ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((matches '()))
        (while (re-search-forward "label:\\([a-zA-z0-9:-]*\\)" (point-max) t)
          (add-to-list 'matches (match-string-no-properties 1) t))
        matches)))
#+end_src

this allows the yasnippet template to autocomplete ref: with all the labels in
the buffer.
** make-capture-frame
If we call make-capture-frame from anywhere, it creates a new frame named
capture which I can decorate using my window manager, and which disappears
after the capturing is complete.

Sources:
- [[https://lists.gnu.org/archive/html/emacs-orgmode/2013-10/msg00150.html][an old mailing list answer]]
- this blog: https://www.diegoberrocal.com/blog/2015/08/19/org-protocol/
- this more recent blog: https://fuco1.github.io/2017-09-02-Maximize-the-org-capture-buffer.html
- this very nice implementation: [[https://gist.github.com/progfolio/af627354f87542879de3ddc30a31adc1][Emacs as an Org capture server]]

#+begin_src emacs-lisp
  (defun make-capture-frame ()
    "Create a new frame and org-capture."
    (interactive)
    ;; (require 'cl-lib)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
              (condition-case err
                  (org-capture nil "x")
                (user-error (when (string= (cadr err) "Abort")
                              (delete-frame))))))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advice capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
#+end_src
** COMMENT play bell sound when task is marked as done
from [[https://stackoverflow.com/questions/15345614/how-to-get-emacs-org-mode-to-play-sound-file-on-done-state][this stackoverflow post]]
#+begin_src emacs-lisp
  (add-hook 'org-after-todo-state-change-hook 'my-org-after-todo-state-change)
  (defun my-org-after-todo-state-change ()
    (when (or (string-equal org-state "DONE")
              (string-equal org-state "CANC"))
      (org-clock-out-if-current)
      (play-sound-file "~/bell.aif")))
#+end_src
* internet stuffs
** internet up
#+begin_src emacs-lisp
  (defun internet-up-p (&optional host)
    (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                       (if host host "www.google.com"))))
#+end_src

** firefox as default browser
#+begin_src emacs-lisp
  (setq browse-url-generic-program (executable-find "firefox")
        browse-url-browser-function 'browse-url-generic)
#+end_src

** allow editing text fields in firefox
from https://chainsawriot.com/postmannheim/2022/12/16/aoe16.html
#+begin_src emacs-lisp
  (use-package atomic-chrome
    :config
    (atomic-chrome-start-server)
    (setq atomic-chrome-buffer-open-style 'full)
    (setq atomic-chrome-url-major-mode-alist
          '(("github\\.com" . poly-markdown+r-mode)
            ("overleaf\\.com" . latex-mode))))
#+end_src
* evil
Evil allows me to use vi(m) keybindings in emacs.
** COMMENT undo-tree
this shouldn't be needed with emacs 28 or later
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src
** evil
vim emulator
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil) ; this is needed for evil-collection
    ;; (setq evil-want-C-i-jump t) ; jump forward instead of tab insert
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-v$-excludes-newline t) ; make v$ consistent with $ as motion
    (setq evil-want-fine-undo t) ;; make smaller undo steps within insert mode
    (customize-set-variable 'evil-respect-visual-line-mode nil)
    (customize-set-variable 'evil-undo-system nil)
    ;; (setq evil-cross-lines t)
    ;; (setq evil-want-C-u-scroll t) ; C-u scrolls up half page
    :config
    (evil-mode 1))
#+end_src
** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil vterm
    :config
    (evil-collection-init))
#+end_src
** evil-org
https://github.com/Somelauw/evil-org-mode
evil keymap for org-mode
#+begin_src emacs-lisp
  (use-package evil-org
    :after (:any org evil)
    :init
    (fset 'evil-redirect-digit-argument 'ignore)
    :delight evil-org-mode
    :hook (((org-mode org-agenda-mode). evil-org-mode)
           (evil-org-mode . (lambda ()
                              (evil-org-set-key-theme
                               '(textobjects
                                 insert
                                 navigation
                                 ;; calendar ; M-h M-l next/previous day etc.
                                 additional
                                 shift
                                 todo ;; heading
                                 ))))
           ;; I want to immediately type when I capture or log
           (org-log-buffer-setup . evil-insert-state)
           (org-capture-mode . evil-insert-state)
           (yas-before-expand-snippet . evil-insert-state))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    ;; TODO: rewrite to :bind syntax?
    (evil-define-key 'motion 'org-agenda-mode-map (kbd "[") 'org-agenda-earlier)
    (evil-define-key 'motion 'org-agenda-mode-map (kbd "]") 'org-agenda-later))
#+end_src

** evil-commentary
https://github.com/linktohack/evil-commentary
comment/uncomment with gc
over on systemcrafters they use evil-nerd-commentary, which has different keybindings by default
main one: M-; or <leader>lc

this uses gc <word>
#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src
** evil-magit
evil keybindings for magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :after (magit evil)
    :hook
    (git-commit-mode . evil-insert-state)
    (magit-mode . turn-off-evil-snipe-override-mode)
    :config
    (evil-set-initial-state 'magit-log-edit-mode 'insert))
#+end_src
* short-doc
No idea why but suddently I've been getting issues about the function =define-short-documentation-group= not existing. This may fix it?
#+begin_src emacs-lisp
  (require 'shortdoc)
#+end_src
* org-mode
** my gtd and inbox files finding functions
org-in-file and org-gtd-file are defined in emacsdirs.el (private file).
#+begin_src emacs-lisp
  ;; TODO: figure out how to do this in a less stupid way
  (defun open-gtd-file ()
    "Open the GTD file."
    (interactive)
    (find-file org-gtd-file))
  (defun open-inbox-file ()
    "Open the inbox file."
    (interactive)
    (find-file org-in-file))
  (defun open-clumped-file ()
     "Open the clumped file."
     (interactive)
     (find-file org-clumped-file))
  #+end_src
** setup
#+begin_src emacs-lisp
  (use-package org
    :ensure nil ; use the org-mode version included in Emacs
    ;; I had this setup before, but the org archive has been deprecated since version 9.6:
    ;; IMPORTANT: please install Org from GNU ELPA as Org ELPA will close
    ;; :ensure org-plus-contrib ; this is version 9.4.6
    ;; :pin org
    :delight org-indent-mode
#+end_src

** keybindings
#+begin_src emacs-lisp
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c g" . open-gtd-file)
   ("C-c i" . open-inbox-file)
   ("C-c t" . open-clumped-file)
   ("C-c !" . org-time-stamp-inactive))
#+end_src
** hook
#+begin_src emacs-lisp
  :hook (
         (org-mode . variable-pitch-mode)
         ;; update last-modified upon save
         (before-save . zp/org-set-last-modified)
         ;; set created property on captures
         (org-capture-prepare-finalize . zp/org-capture-set-created-property)
         ;; disable highlighting of matches in sparse trees so that customized TODO faces remain displayed :)
         (org-occur . (lambda () (org-remove-occur-highlights nil nil nil)))
         ;; make sure the tags in the org-agenda aren't line-wrapped
         (org-agenda-mode . (lambda ()
                                   (visual-line-mode -1)
                                   (toggle-truncate-lines 1)))
         ;; (org-babel-after-execute . org-redisplay-inline-images)
         (org-babel-after-execute . my/babel-ansi)
         )
#+end_src
** start with custom
#+begin_src emacs-lisp
  :custom
#+end_src
** COMMENT org-entities-user
These are nice shorthands for commands I use often. In org-source they look
nice, and they export to both \LaTeX and =html= correctly. Note that
unfortunately, special entity names cannot contain numerics, so =\d18O= is not
possible.
#+begin_src emacs-lisp
  (org-entities-user
   '(("celsius" "\\(^{\\circ}\\)C" nil "&deg;C" "°C" "°C" "℃")
     ("minus" "\\-" t "&minus;" "-" "-" "−")  ;; defaults to =\\minus= in LaTeX, which doesn't work.
     ("permil" "\\textperthousand{}" nil "&permil;" "per thousand" "per thousand" "‰")  ;; exactly the same as in org-entities
     ("us" "\\," nil "&nbsp;" " " " " " ")
     ("appr" "\\sim" t "&tilde;" "~" "~" "~")
     ;; for gps-coordinates
     ("degree" "^{\\circ}" t "&deg;" "°" "°" "°")
     ("arcminute" "^{'}" t "&prime;" "'" "′" "′")
     ("arcsecond" "^{''}" t "&Prime;" "\"" "″" "″")))
#+end_src
** basics
#+begin_src emacs-lisp
  (org-ctrl-k-protect-subtree t)
  (org-return-follows-link t)
  ;; (setf org-special-ctrl-a/e t) ; I use evil's 0 and $ anyway
  ;; folded drawers no longer ruin new entries
  (org-list-allow-alphabetical t) ; allow a. b. c. lists
  (org-M-RET-may-split-line '((default . nil)))
  ;; (org-display-remote-inline-images 'cache)
  ;; (org-startup-with-inline-images t)
#+end_src
** org-latex export settings
basic latex settings
#+begin_src emacs-lisp
  ;; (org-highlight-latex-and-related '(native script entities)) this gives me errors now <2023-07-18 Tue>
  ;; (org-preview-latex-default-process 'dvipng)
  ;; (setq org-latex-default-figure-position 'htbp)
  (org-latex-pdf-process
   (list "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f %f"))
  (org-latex-prefer-user-labels t)
  (org-export-with-sub-superscripts '{})
  (org-use-sub-superscripts '{})
#+end_src
** clocking/logging
#+begin_src emacs-lisp
  (org-check-running-clock t)
  (org-log-note-clock-out t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  ;; (org-clock-auto-clockout-timer (* 10 60))
#+end_src
** theming
#+begin_src emacs-lisp
  (org-tags-column -65)
  (org-startup-indented t)
  (org-startup-folded 'content)
  (org-agenda-block-separator "")
  (org-fontify-emphasized-text t)
        ;; org-fontify-todo-headline t ;; might be nice, but needs customisation of org-headline-todo face
  (org-fontify-whole-heading-line t)
  (org-fontify-quote-and-verse-blocks t)
  (org-pretty-entities t)
  (org-ellipsis "…") ;▼ … ◦
  (org-hide-emphasis-markers t)
#+end_src
** file associations
#+begin_src emacs-lisp
  (org-file-apps
   '((auto-mode . emacs)
     ("\\.x?html?\\'" . "xdg-open %s")
     ("\\.pdf\\'" . (lambda (file link)
                      (org-pdftools-open link)))
     ("\\.mp4\\'" . "xdg-open %s")
     ("\\.webm\\'" . "xdg-open %s")
     ("\\.mkv\\'" . "xdg-open %s")
     ("\\.pdf.xoj\\'" . "xournal %s")))
#+end_src

** COMMENT org-yt
use it to display youtube image previews and other online image previews
https://emacs.stackexchange.com/questions/42281/org-mode-is-it-possible-to-display-online-images
#+begin_src emacs-lisp
  (use-package org-yt
    :straight (org-yt :type git :host github :repo "TobiasZawada/org-yt")
    :config
    (defun org-image-link (protocol link _description)
      "Interpret LINK as base64-encoded image data."
      (cl-assert (string-match "\\`img" protocol) nil
                 "Expected protocol type starting with img")
      (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
        (cl-assert buf nil
                   "Download of image \"%s\" failed." link)
        (with-current-buffer buf
          (goto-char (point-min))
          (re-search-forward "\r?\n\r?\n")
          (buffer-substring-no-properties (point) (point-max)))))

    (org-link-set-parameters
     "imghttp"
     :image-data-fun #'org-image-link)

    (org-link-set-parameters
     "imghttps"
     :image-data-fun #'org-image-link))
#+end_src
** GTD stuff
*** org-agenda
#+begin_src emacs-lisp
  ;; (setq org-agenda-files (list "<file1.org> etc."))
  (calendar-week-start-day 1) ; 0:Sunday, 1:Monday
  (org-deadline-warning-days 14)
  (org-agenda-span 'day)
  ;; exclude scheduled items from all todo's in list
  (org-agenda-todo-ignore-scheduled t)
  ;; (setq org-agenda-todo-ignore-deadlines t)
  ;; (setq org-agenda-todo-ignore-timestamp t)
  ;; (setq org-agenda-todo-ignore-with-date t)
  ;;(setq org-agenda-prefix-format "  %-17:c%?-12t% s") ; TODO: see if I like the default
  (org-agenda-include-all-todo nil)
#+end_src
*** agenda files
all the org-files in my org-directory
#+begin_src emacs-lisp
  ;(setq org-directory "~/org/") ;; changed org-roam capture
  (org-agenda-files (append
                     (directory-files-recursively "~/org" "\\.org$")
                     my/org-roam-files))
#+end_src
*** refile targets
swyper makes refiling amazing!
#+begin_src emacs-lisp
  (org-refile-targets (quote ((nil :maxlevel . 9)  ;; current file
                                   (org-gtd-file :maxlevel . 6)
                                   (org-tickler-file :maxlevel . 2)
                                   (org-notes-file :maxlevel . 2)
                                   (org-lists-file :maxlevel . 2)
                                   (org-someday-file :maxlevel . 2)
                                   (org-clumped-file :maxlevel . 6)
                                   ;; (my/org-roam-files :maxlevel . 1) ;; comment out since org-roam-refile
                                   )))
  (org-outline-path-complete-in-steps nil)   ;; Refile in a single go
  (org-refile-use-outline-path 'file)            ;; Show full paths for refiling
  (org-refile-allow-creating-parent-nodes 'confirm)
#+end_src
*** agenda filters
Filter tasks by context (sorted by todo state)
#+begin_src emacs-lisp
  (org-agenda-sorting-strategy
        '((agenda habit-down time-up priority-down todo-state-up category-keep)
          (todo todo-state-up priority-down category-keep)
          (tags priority-down todo-state-up category-keep)
          (search category-keep)))
  (org-agenda-custom-commands
        '(("i" "Inbox" tags "inbox")
          ("I" "Important"
           ((tags "PRIORITY=\"A\"/prj"
                  ((org-agenda-overriding-header "High-priority projects:")))
            (tags "PRIORITY=\"A\"/!-prj"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))))
          ;; ("A" agenda*)
          ;; https://protesilaos.com/codelog/2021-12-09-emacs-org-block-agenda/
          ("A" "new block agenda"
           ((tags-todo "*"
                       ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                        (org-agenda-skip-function
                         `(org-agenda-skip-entry-if
                           'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                        (org-agenda-block-separator nil)
                        (org-agenda-overriding-header "Important tasks without a date")))
            (todo "WAIT"
                   ((org-agenda-overriding-header "\nTasks on hold")))
            (agenda ""
                    ((org-agenda-block-separator nil)
                     (org-agenda-span 1)
                     (org-deadline-warning-days 0)
                     (org-scheduled-past-days 0)
                     (org-deadline-past-days 0)
                     (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                     (org-agenda-format-date "%A %-e %B %Y")
                     (org-agenda-overriding-header "\nToday's agenda")))
            (agenda ""
                    ((org-agenda-start-on-weekday nil)
                     (org-agenda-start-day "+1d")
                     (org-agenda-span 7)
                     (org-deadline-warning-days 0)
                     (org-agenda-block-separator nil)
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "\nNext seven days")))
            (agenda ""
                    ((org-agenda-time-grid nil)
                     (org-agenda-start-on-weekday nil)
                     (org-agenda-start-day "+7d")
                     (org-agenda-span 14)
                     (org-agenda-show-all-dates nil)
                     (org-deadline-warning-days 0)
                     (org-agenda-block-separator nil)
                     (org-agenda-entry-types '(:deadline))
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "\nUpcoming deadlines (+14d)")))
            (agenda ""
                    ((org-agenda-overriding-header "\nOverdue")
                     (org-agenda-time-grid nil)
                     (org-agenda-block-separator nil)
                     (org-agenda-start-on-weekday nil)
                     (org-agenda-show-all-dates nil)
                     (org-agenda-format-date "")  ;; Skip the date
                     (org-agenda-span 1)
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-entry-types '(:deadline :scheduled))
                     (org-scheduled-past-days 999)
                     (org-deadline-past-days 999)
                     (org-deadline-warning-days 0)))))
          ("n" "Next Actions" todo "NEXT")
          ("w" "Waiting" todo "WAIT")
          ;; ("s" "Someday/Maybe" todo "SOME")
          ("j" "Projects" tags "prj/-SOME-DONE-CANC")
          ("W" "Work" tags-todo "-Personal/!-WAIT"
           ((org-agenda-todo-ignore-scheduled t)))
          ("P" "Personal" tags-todo "-Work/!-WAIT"
           ((org-agenda-todo-ignore-scheduled t)))
          ("g" . "GTD contexts")
          ("gh" "Home" tags-todo "@home")
          ("gk" "Klusjes/Craft" tags-todo "@klusje")
          ("go" "Office" tags-todo "@office")
          ("ge" "Errands" tags-todo "@errands")
          ("gl" "Laboratory" tags-todo "@lab")
          ;; ("gt" "Travel" tags-todo "@travel")
          ("gt" "Teams" tags-todo "@teams")
          ("gc" "Computer" tags-todo "@computer")
          ("gB" "Phone" tags-todo "@phone")
          ("gm" "e-mail" tags-todo "@email")
          ("gb" "Bank" tags-todo "@bank")
          ("gw" "Write" tags-todo "@write")
          ("gp" "Program" tags-todo "@program")
          ("gC" "Create/Plot" tags-todo "@createplot")
          ("gr" "Read" tags-todo "@read")
          ("gg" "Research" tags-todo "@research")
          ("gs" "Schedule" tags-todo "@schedule")
          ("ga" "Agenda" tags-todo "@agenda")
          ("E" . "Energy")
          ("Ef" "Focus" tags-todo "@focus")
          ("Ed" "Braindead" tags-todo "@braindead")
          ("D" "DataSteward" tags-todo "DataSteward")
          ("p" . "People")
          ("pm" "Martin" tags-todo "Martin")
          ("pr" "Richard" tags-todo "Richard")
          ("pl" "Line" tags-todo "Line")
          ("pa" "Anne" tags-todo "Anne")
          ("pf" "FEST" tags-todo "FEST")
          ("pi" "Inigo" tags-todo "Inigo")))
#+end_src
*** stuck projects
#+begin_src emacs-lisp
  (org-tags-exclude-from-inheritance '("prj")
   org-stuck-projects '("+prj/-CANC-SOME-DONE"
                        ("NEXT" "WAIT" "TICK") ()))  ;;  "SOME"
  (org-hierarchical-todo-statistics nil) ;; look for not-done tasks recursively
  ;; (org-provide-todo-statistics '(("NEXT", "TICK") ("CANC", "SOME", "DONE", "WAIT")))
#+end_src
*** capture templates
customize capture templates
 #+begin_src emacs-lisp
   (org-capture-templates
    '(;("a" "Appointment" entry (file org-in-file)
                                           ; "* %?\n  %^T\n")
      ("t" "Todo" entry (file org-in-file)
       "* %?\n%a" :add-created t)
      ("x" "simple" entry (file org-in-file)
       "* %?" :add-created t)
      ("T" "Todo-nolink-tag" entry (file org-in-file)
       "* %? %^G\n" :add-created t)
      ("m" "Email" entry (file org-in-file)
       "* %? from %:from on %:subject :@email:\n %i\n %a\n" :add-created t)
      ("w" "Website" entry (file org-in-file)
       "* %?\nEntered on %U\n %i\n %a")
      ("r" "Weekly Review" entry (file "~/org/log.org")
       (file "~/org/weekly_review.org") :clock-in t :clock-keep t :jump-to-captured t)
      ("p" "Protocol" entry (file org-in-file)
       "* %:description%? :@web:\n[[%:link][%:description]]\n#+begin_quote\n%:initial\n#+end_quote\n" :add-created t)
      ("L" "Protocol Link" entry (file org-in-file)
       "* %:description%? :@web:\n[[%:link][%:description]]" :add-created t)
      ("j" "Journal" entry (file+olp+datetree org-journal-file)
       "* %?\nEntered on %U\n %i\n %a")))
 #+end_src
*** TODO states
#+begin_src emacs-lisp
  (org-todo-keywords
   '((sequence "NEXT(n)" "WAIT(w!/!)" "TICK(t)" "SOME(s!/!)" "|"
               "DONE(d)" "CANC(c)")))
  #+end_src

*** prettify the todo keywords
#+begin_src emacs-lisp
  (org-todo-keyword-faces
   '(("NEXT" . org-todo-next)
     ("WAIT" . org-todo-waiting)
     ("TICK" . org-todo-tick)
     ("SOME" . org-todo-someday)
     ("DONE" . org-done-done)
     ("CANC" . org-done-cancelled)))
#+end_src

*** prettify the org-modern todo keyword faces
#+begin_src emacs-lisp
  (org-modern-todo-faces
   '(("NEXT" . org-todo-next)
     ("WAIT" . org-todo-waiting)
     ("TICK" . org-todo-tick)
     ("SOME" . org-todo-someday)
     ("DONE" . org-done-done)
     ("CANC" . org-done-cancelled)))
#+end_src
*** context tags
#+begin_src emacs-lisp
  (org-fast-tag-selection-single-key t)
  (org-tag-alist '(("prj" . ?j)
                   (:startgroup . nil)
                   ("@home" . ?h)
                   ("@office" . ?o)
                   ("@errands" . ?e)
                   ("@lab" . ?l)
                   (:endgroup . nil)
                   ("@computer" . ?c)  ;; general in case I can't decide
                   ("@klusje" . ?k)    ;; crafts, things that require my toolbox
                   ("@phone" . ?B)     ;; b for Dutch "bellen"
                   ("@email" . ?m)
                   ("@teams" . ?t)
                   ("@bank" . ?b)      ;; I need my little reader thingie
                   ("@write" . ?w)
                   ("@program" . ?p)
                   ("@createplot" . ?C)
                   ("@read" . ?r)
                   ("@research" . ?g)
                   ("@schedule" . ?s)
                   ("@agenda" . ?a)    ;; things to discuss
                   ;; ("@admin" . ??) ;; do I want admin? which key should it use?
                   (:startgroup . nil)
                   ("@focus" . ?f)
                   ("@braindead" . ?d)
                   (:endgroup . nil)
                   (:startgroup . nil)
                   ("Work" . ?W) ("Personal" . ?P)
                   (:endgroup . nil)
                   ;; ("DataSteward" . ?D)
                   ;; tags to accompany the @agenda context
                   ("Family" . ?F)
                   ("Martin" . ?M)
                   ("Richard" . ?R)
                   ("Line" . ?L)
                   ("Inigo" . ?I)
                   ("Niels" . ?N)))
#+end_src
*** org src blocks
#+begin_src emacs-lisp
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'current-window)
#+end_src
** config start
#+begin_src emacs-lisp
  :config
#+end_src
*** COMMENT quick-capture
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c h")
  (lambda () (interactive) (org-capture nil "x")))
#+end_src
*** effort estimates
#+begin_src emacs-lisp
  (add-to-list 'org-global-properties
               '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
#+end_src
*** habits
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit t)
#+end_src
** exporting
*** org-babel languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (python . t)
     (latex . t)
     (shell . t)
     ;; (stan . t)
     (latex . t)
     (R . t)
     (julia . t)
     ;; (julia-vterm . t)
     ))
#+end_src
*** org-babel ANSI colours
https://emacs.stackexchange.com/questions/44664/apply-ansi-color-escape-sequences-for-org-babel-results
This will apply the ANSI colour escape codes to source block outputs.

However, it will not store the results so it won't show on export or the next time you open the file. The text will be plain, colourless, instead.

I still prefer this option because I have colours during my session/in the ESS process.

#+begin_src emacs-lisp
  (defun my/babel-ansi ()
    (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
      (save-excursion
        (goto-char beg)
        (when (looking-at org-babel-result-regexp)
          (let ((end (org-babel-result-end))
                (ansi-color-context-region nil))
            (ansi-color-apply-on-region beg end))))))
  (add-hook 'org-babel-after-execute-hook #'my/babel-ansi)
#+end_src
*** org-export odt
#+begin_src emacs-lisp
  (require 'ob-org)
#+end_src
*** ox-extra
org-export ignore headlines with ~:ignore:~ tag
#+begin_src emacs-lisp
  (use-package org-contrib
    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))
#+end_src
*** ox-latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src
*** org-latex-packages
:LOGBOOK:
- Note taken on [2023-06-05 Mon 14:55] \\
  I've re-enabled this and added biblatex default options
:END:
# I preferRED to set this for each paper separately, just to be sure.
#+begin_src emacs-lisp
  (customize-set-variable 'org-latex-packages-alist
        '(("version=4" "mhchem" t)
          ("" "siunitx" t)
          ("giveninits=true,uniquename=false,uniquelist=false,citestyle=authoryear-comp,bibstyle=authoryear-comp,date=year,hyperref=true,mincitenames=1,maxcitenames=2,backend=biber,backref,doi=true,url=false,isbn=false" "biblatex" t)
          ("" "amsmath" t)
          ("" "hyperref" t)
          ;; cleveref must be loaded after hyperref and amsmath
          ("capitalise,nameinlink,noabbrev" "cleveref" t)))
  ;; append colorlinks, allcolors, hidelinks here
  ;; (customize-set-value 'org-latex-hyperref-template "
  ;; \\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},
  ;;  pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true}\n")  % colorlinks=true,
  ;; % allcolors=blue,%
#+end_src
*** org bibliography
:PROPERTIES:
:CREATED:  [2023-06-05 Mon 13:46]
:END:
#+begin_src emacs-lisp
  ;; (customize-set-variable 'org-cite-global-bibliography '("/home/japhir/SurfDrive/bibliography/references.bib"))
  (setq org-cite-csl-styles-dir "~/Zotero/styles")
  ;; (setq org-cite-csl--fallback-style-file "/home/japhir/Zotero/styles/paleoceanography.csl") ; doesn't have a bibliography style!
  (setq org-cite-csl--fallback-style-file "/home/japhir/Zotero/styles/apa.csl")
  ;; (setq org-cite-csl--fallback-style-file "/home/japhir/Zotero/styles/nature.csl")
  ;; use biblatex for latex and csl for html.
  (setq org-cite-export-processors '((latex biblatex)
                                     (t csl)))
  ;; (setq org-cite-biblatex-options bibstyle=authoryear-comp)
  (add-to-list 'load-path "/usr/bin/vendor_perl/")
#+end_src
*** latejx class =ijkarticle=
#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
         '("ijkarticle"
  "\\documentclass{article}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

*** add emacs and R source blocks
[[https://emacs.stackexchange.com/a/47370/9748][Nice answer on how to have point on a blank line in code block]]
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("se" . "src emacs-lisp
  "))
  ;; TODO figure out how to add multiple items to the list
  (add-to-list 'org-structure-template-alist
               '("sr" . "src R
  "))
  (add-to-list 'org-structure-template-alist
               '("sc" . "src c
  "))
  (add-to-list 'org-structure-template-alist
               '("sp" . "src python
  "))
  (add-to-list 'org-structure-template-alist
               '("sj" . "src julia
  "))
  (add-to-list 'org-structure-template-alist
               '("ss" . "src sh
  "))
#+end_src
** org-protocol
#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src

** close use-package org
#+begin_src emacs-lisp
  )
#+end_src
** org-num settings
#+begin_src emacs-lisp
  (customize-set-variable 'org-num-skip-unnumbered t)
  (customize-set-variable 'org-num-skip-commented t)
  (customize-set-variable 'org-num-skip-tags '("ignore" "nolatex" "noexport"))
#+end_src

#+RESULTS:
| ignore | nolatex | noexport |

** COMMENT display PROPERTIES in agenda
#+begin_src emacs-lisp
  (use-package org-agenda-property
    :custom
    (org-agenda-property-list '("DELEGATED_TO"))
    (org-agenda-property-position 'next-line))
#+end_src
** COMMENT org-superstar-mode
https://github.com/integral-dw/org-superstar-mode

Here are some symbol options for my various todo-states
inbox: 📨📥
NEXT: ☐⏭
DONE: ☑🗹✅
TICK: →🗓📅📆
WAIT: ☕📨…
SOME: ☁⛅⛈🌤🌧🌥🌪⛱☼
CANC: ❌☒✗⮽🗳🗵🗷✘╳❌ ❎🗑

see e.g. https://emojipedia.org/calendar/ for emoji!

#+begin_src emacs-lisp
  (use-package org-superstar
    :hook
    (org-mode . (lambda () (org-superstar-mode 1)))
    :custom
    (org-superstar-headline-bullets-list
     '("◉" "●" "○" "⬡" "◆" "►" "▸"))
    ;; (org-superstar-todo-bullet-alist '(("NEXT" " ⏭ " ?⏭)
    ;;                                    ("TICK" " 🗓" ?🗓)
    ;;                                    ("WAIT" " 📨" ?📨)
    ;;                                    ("SOME" " ☁" ?☁)
    ;;                                    ("DONE" " ☑" ?☑)
    ;;                                    ("CANC" " 🗑" ?🗑)))
    ;;(org-superstar-special-todo-items t)
    )
#+end_src
** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :config (global-org-modern-mode 1))
#+end_src

** ob-async
allow asyncronous code block evaluation https://github.com/astahlman/ob-async
#+begin_src emacs-lisp
  (use-package ob-async
    :after org)
#+end_src
** org-pomodoro
got the function from this [[https://github.com/marcinkoziej/org-pomodoro/issues/89#issuecomment-701025952][github issue]]
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org
    :bind ("C-c p" . org-pomodoro)
    :hook (org-pomodoro-break-finished . org-pomodoro-prompt)
    :custom
    (org-pomodoro-manual-break t)
    (org-pomodoro-long-break-length 15)
    :config
    (defun org-pomodoro-prompt ()
      (interactive)
      (org-clock-goto)
      (if (y-or-n-p "Start a new pomodoro?")
          (progn
            (org-pomodoro))))
    )
#+end_src
** COMMENT org-hyperscheduler
not sure if I like it enough yet, but looks promising!
https://github.com/dmitrym0/org-hyperscheduler
#+begin_src emacs-lisp
  (use-package org-hyperscheduler
    :straight
    (org-hyperscheduler
     :repo "dmitrym0/org-hyperscheduler"
     :host github
     :branch "main"
     :type git
     :files ("*")))
#+end_src
** org-pdftools
used to be org-pdfview
#+begin_src emacs-lisp
  (use-package org-pdftools
    :after (org pdf-tools)
    :hook (org-mode . org-pdftools-setup-link))
#+end_src

** COMMENT view inline pdfs?
doesn't work :(
#+begin_src emacs-lisp
  (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "pdf")
  (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
  (setq org-image-actual-width (list 800))
#+end_src
** org-beamer
#+begin_src emacs-lisp
  (use-package ox-latex
    :after org
    :ensure nil
    :config
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass\[presentation\]\{beamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
#+end_src
** COMMENT org-fragtog
auto-toggle latex fragments
#+begin_src emacs-lisp
  (use-package org-fragtog
    :after org
    :hook (org-mode . org-fragtog-mode)
    :custom
    ;; (org-startup-with-latex-preview t)
    (org-format-latex-options (plist-put org-format-latex-options :scale 2.5)))
#+end_src
** org-appear
dive into links/formatted entries
https://github.com/awth13/org-appear
#+begin_src emacs-lisp
  (use-package org-appear
    ;; :straight (org-appear :type git :host github :repo "awth13/org-appear")
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-autoentities t)
    (org-appear-autolinks t)
    (org-appear-autosubmarkers t)
    (org-appear-delay 1))
#+end_src
** COMMENT deft
:LOGBOOK:
- Note taken on [2020-07-15 Wed 16:09] \\
  added it based on [[file:~/SurfDrive/bibliography/notes//20200715160129-an_orgmode_note_workflow.org][An Orgmode Note Workflow]]
:END:
#+begin_src emacs-lisp :eval never :tangle no
  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory))
#+end_src

** COMMENT pdf preview in org
#+begin_src emacs-lisp :eval never :tangle no
  ; (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  ; (add-to-list 'image-file-name-extensions "pdf")
  ; (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit)
  ;       org-image-actual-width t)
#+end_src

** COMMENT org-clock-reminder
#+begin_src emacs-lisp
  (use-package org-clock-reminder
    :config
    (setq org-clock-reminder-interval 600)
    (setq org-clock-reminder-remind-inactivity 't)
    (org-clock-reminder-activate))
#+end_src
* presenting
** org-tree-slide-mode
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :after org
    :bind (:map org-mode-map ("<f9>" . org-tree-slide-mode)))
#+end_src

* writing
** COMMENT spell-fu
#+begin_src emacs-lisp
  (use-package spell-fu
    :hook (org-mode . (lambda()
                        (setq spell-fu-faces-exclude
                              '(org-meta-line org-link org-code))
                        (spell-fu-mode))))
#+end_src
** easy symbol insertion
By default C-x 8 o = ° and C-x 8 m = µ. So:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 8 a") (lambda () (interactive) (insert "α")))
  (global-set-key (kbd "C-x 8 b") (lambda () (interactive) (insert "β")))
  (global-set-key (kbd "C-x 8 d") (lambda () (interactive) (insert "δ")))
  (global-set-key (kbd "C-x 8 D") (lambda () (interactive) (insert "Δ")))
#+end_src
I also use compose-key, mapped to right alt with some custom settings for
<ralt> g d, resulting in δ, for example.
** all-the-icons
https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (setq inhibit-compacting-font-caches t)
#+end_src
*** all-the-icons-ivy
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy
    :after (ivy all-the-icons)
    :config
    (all-the-icons-ivy-setup))
#+end_src
*** all-the-icons-dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after (dired all-the-icons)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** COMMENT emojify-mode
#+begin_src emacs-lisp :tangle no
  (use-package emojify
    :custom (emojify-emoji-styles 'unicode)
    :hook ((mu4e-mode mu4e-view-mode mu4e-compse-mode org-mode) . emojify-mode))
#+end_src
** yasnippet
usefull snippets for me: org-mode (fig_, )
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    :delight yas-mode
    :config
    (require 'warnings)
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
    (setq yas-indent-line t))
#+end_src
** ispell: spell-checking
#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setq ispell-dictionary "british-ize-w_accents"))
#+end_src
** flyspell
#+begin_src emacs-lisp
  (use-package flyspell
    :hook ((org-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode))
    :config
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_example " . "#\\+end_example$"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXAMPLE " . "#\\+END_EXAMPLE$")))
#+end_src
** org-ref
I use most of the minimal setup in this [[https://github.com/jkitchin/org-ref/blob/master/melpa/init-ivy.el][init-ivy]] config.
*** bibtex
#+begin_src emacs-lisp
  ;(add-hook 'bibtex-mode-hook 'flyspell-mode)
  (setq bibtex-user-optional-fields
        '(("keywords" "Keywords to describe the entry" "")
          ("file" "Link to document file." ":"))
        bibtex-align-at-equal-sign t)
  ;; (setq bibtex-dialect 'biblatex)
#+end_src

*** COMMENT bibtex/ivy-bibtex
reference manager I use it in conjunction with zotero, which generates the
.bib files, and org-ref, to insert citations in org files.

#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :after ivy
    :init
    (setq bibtex-completion-bibliography
          '("~/SurfDrive/bibliography/references.bib"
            "~/Documents/References/PhD.bib")
          bibtex-completion-library-path '("~/SurfDrive/bibliography/")
          bibtex-completion-notes-path "~/SurfDrive/bibliography/notes/"
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))
#+end_src

#+RESULTS:
*** COMMENT automatically generating bibtex keys
#+begin_src emacs-lisp
  (use-package bibtex
    :custom
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-name-year-separator "-" )
    (bibtex-autokey-year-title-separator "-")
    (bibtex-autokey-titlewords 0)
    (bibtex-autokey-titlewords-stretch 0)
    (bibtex-autokey-titleword-length 0)
    ;; org-ref-bibtex-hydra-key-binding (kbd "")
    )
#+end_src

#+RESULTS:

*** org-ref itself
https://github.com/jkitchin/org-ref/blob/master/org-ref.org
#+begin_src emacs-lisp
  (use-package org-ref
    ;; :after org
    :init
    (require 'bibtex)
    :bind
    (:map org-mode-map
          ("s-[" . org-ref-insert-link-hydra/body)
          ("C-c ]" . org-ref-insert-link))
    :hook
    (org-export-before-parsing . org-ref-glossary-before-parsing)
    (org-export-before-parsing . org-ref-acronyms-before-parsing)
    :custom
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-name-year-separator "")
    (bibtex-autokey-year-title-separator "-")
    (bibtex-autokey-titleword-separator "-")
    (bibtex-autokey-titlewords 0)
    (bibtex-autokey-titlewords-stretch 1)
    (bibtex-autokey-titleword-length 5)
    :init
    (require 'org-ref-ivy)
    (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
          org-ref-insert-cite-function 'org-ref-cite-insert-ivy
          org-ref-default-citation-link 'parencite
          org-ref-insert-label-function 'org-ref-insert-label-link
          org-ref-insert-ref-function 'org-ref-insert-ref-link
          org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
    ;; (require 'org-ref-archiv)
    ;; (require 'org-ref-scopus)
    ;; (require 'org-ref-wos)
    )
#+end_src

*** open zotero pdf at point
from [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#a-note-for-mendeley-jabref-and-zotero-users][the manual]]
#+begin_src emacs-lisp
  (setq bibtex-completion-pdf-field "file")

  (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
      (key (car results))
      (pdf-file (car (bibtex-completion-find-pdf-in-field key))))
      (if (file-exists-p pdf-file)
         (org-open-file pdf-file)
        (message "No PDF found for %s" key))))

  (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
  ;; (setq org-ref-get-pdf-filename-function 'bibtex-completion-find-pdf-in-field)

  (global-set-key (kbd "<f8>") 'my/org-ref-open-pdf-at-point)
#+end_src

#+RESULTS:
: my/org-ref-open-pdf-at-point

*** citeproc
#+begin_src emacs-lisp
  (use-package citeproc)
  (use-package citeproc-org)
#+end_src

#+RESULTS:

* COMMENT navigation
** COMMENT beginend
#+begin_src emacs-lisp
  (use-package beginend
    :init
    (beginend-global-mode))
#+end_src

** COMMENT evil-easymotion
Link evil forward commands etc. to avy jump previews so you can jump down 10
lines if you forgot to press 10j. https://github.com/PythonNut/evil-easymotion/
#+begin_src emacs-lisp
  (use-package evil-easymotion
    :config
    (evilem-default-keybindings "SPC"))
#+end_src
** COMMENT evil-snipe
https://github.com/hlissner/evil-snipe
#+begin_src emacs-lisp
  (use-package evil-snipe
    :delight evil-snipe-mode
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1))
#+end_src
* note-taking
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :load-path "/usr/share/emacs/site-lisp/pdf-tools"
    :init
    (pdf-tools-install)
    :custom
    ;(pdf-loader-install)
    (pdf-view-display-size 'fit-width)
    :bind
    ;; swiper doesn't play nice with pdf-tools, so I disable it.
    ;(:map pdf-view-mode-map ("C-s" . isearch-forward))
   )
#+end_src
** NEXT COMMENT org-xournalpp
#+begin_src emacs-lisp :tangle no
  (use-package org-xournalpp
    :ensure t
    :quelpa (org-xournalpp :fetcher gitlab :repo "vherrmann/org-xournalpp" :files ("*.el" "resources"))
    :config
    (add-hook 'org-mode-hook 'org-xournalpp-mode))
#+end_src
** org-noter
https://github.com/weirdNox/org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :config
    :bind ((:map org-mode-map ("C-c o" . org-noter))
           (:map org-noter-notes-mode-map
                 ("C-c k" . org-noter-pdftools-create-skeleton)
                 ("C-c q" . org-noter-kill-session)))
    :custom
    ;; org-noter-notes-window-location 'horizontal-split
     ;; Please stop opening frames
     (org-noter-always-create-frame nil)
     (org-noter-kill-frame-at-session-end nil)
     ;; I want to see the whole file
     (org-noter-hide-other nil)
     ;; Everything is relative to the main notes file
     (org-noter-notes-search-path "~/SurfDrive/bibliography/notes/")
    (require 'org-noter-pdftools))

  (use-package org-pdftools
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freepointer-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))

    ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
  With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
*** COMMENT org-noter-insert-precice-note-dwim---stolen from zaeph
https://github.com/zaeph/.emacs.d/blob/master/init.el#L4420
#+begin_src emacs-lisp
    (defun zp/org-noter-insert-precise-note-dwim (force-mouse)
      "Insert note associated with a specific location.
  If in nov-mode, use point rather than the mouse to target the
  position."
      (interactive "P")
      (if (and (derived-mode-p 'nov-mode)
               (not force-mouse))
          (let ((pos (if (region-active-p)
                         (min (region-beginning) (point))
                       (point))))
            (org-noter-pdftools-insert-note pos))
        (org-noter-pdftools-insert-precise-note)))
#+end_src
** org-noter-pdftools
https://github.com/fuxialexander/org-pdftools
#+begin_src emacs-lisp
  (use-package org-noter-pdftools
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freestyle-annot 'org-pdftools-use-freepointer-annot))
         (org-noter-insert-note (org-noter--get-precise-info)))))

    ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
  With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

** org-roam
[[https://org-roam.readthedocs.io/en/latest/installation/][docs here]]
[[file:~/SurfDrive/bibliography/notes//20200427230825-how_to_take_smart_notes.org][How to Take Smart Notes]]

#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :commands (org-roam-buffer-toggle-display
               org-roam-find-file
               org-roam-graph
               org-roam-insert
               org-roam-switch-to-buffer
               org-roam-dailies-date
               org-roam-dailies-today
               org-roam-dailies-tomorrow
               org-roam-dailies-yesterday)
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n d" . org-roam-dailies-capture-today)
           :map org-roam-mode-map
           ("<mouse-1>" . org-roam-visit-thing)
           :map org-mode-map
           (("C-c n l" . org-roam-buffer-toggle)
            ("C-c n g" . org-roam-graph)
            ("C-c n i" . org-roam-node-insert)
            :map evil-normal-state-map ;; is there an evil map within org-mode?
            ("g[" . org-roam-dailies-goto-previous-note)
            ("g]" . org-roam-dailies-goto-next-note)))
    :custom
    ;; the file-truename part makes it follow symbolic links!
    (org-roam-directory (file-truename "~/SurfDrive/bibliography/notes/"))
    (org-roam-dailies-directory "daily/")
    (org-id-link-to-org-use-id 'create-if-interactive)
    (org-roam-completion-everywhere t)
    (org-roam-verbose nil) ; https://youtu.be/fn4jIlFwuLU
    (org-roam-buffer-no-delete-other-windows t) ; make org-roam buffer sticky
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new  (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                   "#+title: ${title}\n#+created: %U\n#+last_modified:\n")
        :immediate-finish t
        :unnarrowed t)
       ("p" "people" plain
          "%?"
          :if-new  (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+created: %U\n#+last_modified:\n\n#+filetags: people")
          :immediate-finish t
          :unnarrowed t)
       ("r" "bibliography reference" plain
        (file "/home/japhir/ArchConfigs/org-roam-bibtex-capture.org")
        :if-new
        (file+head "${citekey}.org" "#+title: ${citekey}: ${title}\n")
        :add-created t
        :unnarrowed t)))
    (org-roam-capture-ref-templates
     '(("r" "ref" plain
        "%?"
        :if-new (file+head "${citekey.org}"
                           "#+title: ${citekey}: ${title}\n")
        :immediate-finish t
        :add-created t
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :if-new (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n#+created: %U\n#+last_modified: %U\n")
        :add-created t
        :jump-to-captured t)))
    :config
    (org-roam-setup)
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   ;; (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))
    (require 'org-roam-capture))
#+end_src

** org-roam-bibtex
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :config
    (org-roam-bibtex-mode))
#+end_src

** COMMENT org-transclusion
:PROPERTIES:
:CREATED:  [2023-06-03 Sat 07:49]
:END:
#+begin_src emacs-lisp
  (use-package org-transclusion)
  (define-key org-mode-map (kbd "<f12>") #'org-transclusion-add)
  (define-key org-mode-map (kbd "C-n t") #'org-transclusion-mode)
#+end_src
** COMMENT bibtex-completion
seems like this is what both [[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el#L454][jethro]] and [[https://github.com/zaeph/.emacs.d/blob/8243cd8c74775387e011de679f041ca8e3cff41a/init.el#L3865][zaeph]] seem to be using since org-roam v2 update
#+begin_src emacs-lisp
  (use-package bibtex-completion
    :disabled
    :config
    (setq bibtex-completion-notes-path "~/SurfDrive/bibliography/notes/"
          bibtex-completion-bibliography "~/SurfDrive/bibliography/references.bib"
          bibtex-completion-pdf-field "file"
          bibtex-completion-notes-template-multiple-files
          (concat
           ":PROPERTIES:"
           ":ROAM_REFS: cite:${=key=}\n"
           ":END:"
           "#+title: ${=key=}: ${title}\n"
           "* TODO Notes\n"
           ":PROPERTIES:\n"
           ":Custom_ID: ${=key=}\n"
           ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
           ":AUTHOR: ${author-abbrev}\n"
           ":JOURNAL: ${journaltitle}\n"
           ":DATE: ${date}\n"
           ":YEAR: ${year}\n"
           ":DOI: ${doi}\n"
           ":URL: ${url}\n"
           ":END:\n\n"
           )))
#+end_src

** patch ox-html so that export with id links works
https://gist.github.com/jethrokuan/d6f80caaec7f49dedffac7c4fe41d132
#+begin_src emacs-lisp
  (defun org-html--reference (datum info &optional named-only)
    "Return an appropriate reference for DATUM.
  DATUM is an element or a `target' type object.  INFO is the
  current export state, as a plist.
  When NAMED-ONLY is non-nil and DATUM has no NAME keyword, return
  nil.  This doesn't apply to headlines, inline tasks, radio
  targets and targets."
    (let* ((type (org-element-type datum))
           (user-label
            (org-element-property
             (pcase type
               ((or `headline `inlinetask) :CUSTOM_ID)
               ((or `radio-target `target) :value)
               (_ :name))
             datum))
           (user-label (or user-label
                           (when-let ((path (org-element-property :ID datum)))
                             (concat "ID-" path)))))
      (cond
       ((and user-label
             (or (plist-get info :html-prefer-user-labels)
                 ;; Used CUSTOM_ID property unconditionally.
                 (memq type '(headline inlinetask))))
        user-label)
       ((and named-only
             (not (memq type '(headline inlinetask radio-target target)))
             (not user-label))
        nil)
       (t
        (org-export-get-reference datum info)))))
#+end_src

** org-roam-create-note-from-headline
https://org-roam.discourse.group/t/creating-an-org-roam-note-from-an-existing-headline/978
#+begin_src emacs-lisp
  (defun org-roam-create-note-from-headline ()
    "Create an Org-roam note from the current headline and jump to it.

  Normally, insert the headline’s title using the ’#title:’ file-level property
  and delete the Org-mode headline. However, if the current headline has a
  Org-mode properties drawer already, keep the headline and don’t insert
  ‘#+title:'. Org-roam can extract the title from both kinds of notes, but using
  ‘#+title:’ is a bit cleaner for a short note, which Org-roam encourages."
    (interactive)
    (let ((title (nth 4 (org-heading-components)))
          (has-properties (org-get-property-block)))
      (org-cut-subtree)
      (org-roam-find-file title nil nil 'no-confirm)
      (org-paste-subtree)
      (unless has-properties
        (kill-line)
        (while (outline-next-heading)
          (org-promote)))
      (goto-char (point-min))
      (when has-properties
        (kill-line)
        (kill-line))))
#+end_src

** zaeph's CREATED and LAST_MODIFIED properties
https://github.com/zaeph/.emacs.d/blob/master/lisp/zp-org.el#L140
#+begin_src emacs-lisp
  (defvar zp/org-created-property-name "CREATED"
      "The name of the org-mode property that stores the creation date of the entry")

  ;; TODO: Find the source for this because I’ve improved something which
  ;; already existed
  (defun zp/org-set-created-property (&optional active name)
    "Set a property on the entry giving the creation time.
  By default the property is called CREATED. If given, the ‘NAME’
  argument will be used instead. If the property already exists, it
  will not be modified.
  If the function sets CREATED, it returns its value."
    (interactive)
    (let* ((created (or name zp/org-created-property-name))
           (fmt (if active "<%s>" "[%s]"))
           (now (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))
      (unless (org-entry-get (point) created nil)
        (org-set-property created now)
        now)))
#+end_src

*** set it after capture
#+begin_src emacs-lisp
  (defun zp/org-capture-set-created-property ()
    "Conditionally set the CREATED property on captured trees."
    (let ((add-created (plist-get org-capture-plist :add-created))
          (type (plist-get org-capture-current-plist :type)))
      (when (and (not org-note-abort)
                 (eq type 'entry)
                 add-created)
        (unless (buffer-narrowed-p)
          (error "Cannot add CREATED when buffer is not narrowed"))
        (save-excursion
          (goto-char (point-min))
          (zp/org-set-created-property)))))
#+end_src

*** set time-file property
#+begin_src emacs-lisp
  (defun zp/org-set-time-file-property (property &optional anywhere pos)
    "Set the time file PROPERTY in the preamble.
  When ANYWHERE is non-nil, search beyond the preamble.
  If the position of the file PROPERTY has already been computed,
  it can be passed in POS."
    (when-let ((pos (or pos
                        (zp/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))
#+end_src

*** org-find-time-file-property
#+begin_src emacs-lisp
  (defun zp/org-find-time-file-property (property &optional anywhere)
    "Return the position of the time file PROPERTY if it exists.
  When ANYWHERE is non-nil, search beyond the preamble."
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading)
                                 t)
          (point)))))
#+end_src
*** org-has-time-file-property-p
#+begin_src emacs-lisp
  (defun zp/org-has-time-file-property-p (property &optional anywhere)
    "Return the position of time file PROPERTY if it is defined.
  As a special case, return -1 if the time file PROPERTY exists but
  is not defined."
    (when-let ((pos (zp/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos
          -1))))
#+end_src

*** set last modified
#+begin_src emacs-lisp
  (defun zp/org-set-last-modified ()
    "Update the LAST_MODIFIED file property in the preamble."
    (when (derived-mode-p 'org-mode)
      (zp/org-set-time-file-property "LAST_MODIFIED")))
#+end_src

** COMMENT org-roam-bibtex
#+begin_src emacs-lisp :tangle no
  (use-package org-roam-bibtex
    :after org-roam
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions)))
    :custom
    ;(orb-note-actions-interface 'ivy)
    (orb-preformat-keywords
     '("citekey" "title" "url" "author-or-editor" "journal" "keywords" "file"))
    (orb-process-file-keyword t)
    (orb-file-field-extensions '("pdf")))
#+end_src

** COMMENT org-roam-protocol
this bit errors out if I use-package it.

Since the org module lazy loads org-protocol (waits until an org URL is detected), we can safely chain `org-roam-protocol' to it.
#+begin_src emacs-lisp
  (require 'org-roam-protocol
      :after org-protocol)
#+end_src

** org-roam-ui
https://github.com/org-roam/org-roam-ui
#+begin_src emacs-lisp
  (use-package org-roam-ui
      :after org-roam
      ;; :hook
      ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
      ;;         a hookable mode anymore, you're advised to pick something yourself
      ;;         if you don't care about startup time, use
      ;; :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
#+end_src

** COMMENT ora-roam-todo
from [[https://github.com/abo-abo/oremacs/blob/github/modes/ora-org-roam.el#L106][abo-abo's oremacs config]]
#+begin_src emacs-lisp :tangle no
  (defun ora-roam-todo ()
    "An ad-hoc agenda for `org-roam'."
    (interactive)
    (let* ((win (next-window))
           (buf (current-buffer))
           (bname "*roam-todo*")
           (b (get-buffer bname)))
      (if b
          (progn
            (switch-to-buffer b)
            (ivy-occur-revert-buffer))
        (setq b (get-buffer-create bname))
        (switch-to-buffer b)
        (ora-roam-occur)
        (setq ivy-occur-last (make-ivy-state
                              :action #'counsel-git-grep-action
                              :buffer buf
                              :caller 'ora-roam-todo
                              :directory default-directory
                              :re-builder #'ivy--regex-plus
                              :text ivy-text
                              :window win)))))

  (ivy-configure 'ora-roam-todo
    :occur #'ora-roam-occur
    :parent 'counsel-rg)

  (defun ora-roam-occur (&optional _cands)
    (unless (eq major-mode 'ivy-occur-grep-mode)
      (ivy-occur-grep-mode))
    (setq default-directory org-roam-directory)
    ;; (setq-local counsel-ag-command
    ;;             '("rg" "--no-heading" "--line-number" "--sortr" "modified" "--color" "never" "-s" "%s"))
    (setq-local counsel-ag-command '("ug" "--colour=never" "--sort=rused" "--binary-files=without-match" "%s"))
    (ivy-set-text "^\\*+  (TODO|NEXT|WAIT|TICK)")
    (let ((cands (counsel--split-string
                  (counsel--call
                   (cl-subst ivy-regex "%s" counsel-ag-command :test #'equal))))
          (today (format-time-string "%Y_%m_%d")))
      (setq cands
            (cl-remove-if
             (lambda (s)
               (and (string-match ":\\([0-9]+_[0-9]+_[0-9]+\\):" s)
                    (string< today (match-string 1 s))))
             cands))
      (swiper--occur-insert-lines (mapcar #'counsel--normalize-grep-match cands))))
#+end_src

#+RESULTS:
: ora-roam-occur

* playing videos
** emms for playing youtube videos etc.
#+begin_src emacs-lisp
  (use-package emms
    :defer t
    :config
    (require 'emms-setup)
    (emms-all)
    (default-players))
#+end_src
** COMMENT org-media-note
#+begin_src emacs-lisp :tangle no
  (use-package quelpa-use-package)
  (use-package pretty-hydra)
  (use-package org-media-note
    :quelpa (org-media-note :fetcher github :repo "yuchen-lea/org-media-note")
    :ensure nil
    :hook (org-mode . org-media-note-mode)
    :bind (("C-c v" . org-media-note-hydra/body))  ;; Main entrance
    :custom
    (org-media-note-screenshot-image-dir "~/SurfDrive/bibliography/notes/imgs/"))
#+end_src

** COMMENT mpv
play videos from orgmode!
#+begin_src emacs-lisp
  (use-package mpv
    :hook
    (org-open-at-point-functions . mpv-seek-to-position-at-point)
    :config
    (org-add-link-type "mpv" #'mpv-play)
    (defun org-mpv-complete-link (&optional arg)
      (replace-regexp-in-string
       "file:" "mpv:"
       (org-file-complete-link arg)
       t t)))
#+end_src
it's not working so far

* swiper / ivy
very nice search replacement
#+begin_src emacs-lisp
  (use-package swiper
    :init (ivy-mode 1)
    :delight ivy-mode
    :config
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    :bind
    ("\C-s" . swiper)
    ("C-c C-r" . ivy-resume)
    ("C-c v" . ivy-push-view)
    ("C-c V" . ivy-pop-view))
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :init (counsel-mode 1)
    :delight counsel-mode
    :bind
    ("C-x l" . counsel-locate)
    ;; ("C-c g" . counsel-git)
    ;; ("M-x" . counsel-M-x)
    ("C-c s" . counsel-rg))
#+end_src
** link-hint
#+begin_src emacs-lisp
  (use-package link-hint
    :ensure t
    :defer t
    :bind ((:map evil-normal-state-map ("SPC f" . link-hint-open-link))))
;;(:map mu4e-view-mode-map ("f" . link-hint-open-link))
#+end_src

* COMMENT load systemcrafters completion config
:PROPERTIES:
:CREATED:  [2023-04-11 Tue 09:17]
:END:
It's been recently updated to become even more customizable <3
https://github.com/SystemCrafters/crafted-emacs/blob/craftedv2alpha/README-new.org

now switched to beta
https://github.com/SystemCrafters/crafted-emacs/blob/craftedv2beta/README.org

-> disable
[[file:~/ArchConfigs/myinit.org::*swiper / ivy][swiper / ivy]]
[[file:~/ArchConfigs/myinit.org::*bibtex/ivy-bibtex][bibtex/ivy-bibtex]]
org-ref-ivy, a line in [[file:~/ArchConfigs/myinit.org::*org-ref itself][org-ref itself]]
[[file:~/ArchConfigs/myinit.org::*all-the-icons-ivy][all-the-icons-ivy]]

#+begin_src emacs-lisp
  (load "~/crafted-emacs/modules/crafted-init-config")

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (and custom-file
             (file-exists-p custom-file))
    (load custom-file nil :nomessage))

  (require 'crafted-completion-packages)  ; must come first to install
                                          ; the packages

  (package-install-selected-packages :noconfirm) ; install the packages
                                          ; from the bundle
                                          ; mentioned above.

  ;; (require 'crafted-defaults-config) ; I don't like winner-mode and some of the keybindings in here
  (require 'crafted-startup-config)
  (require 'crafted-completion-config)

  (keymap-global-set "C-c s" 'consult-ripgrep)
  ;; I thought this one was set already but it's not working for me
  (keymap-global-set "C-s" 'consult-line)
  ;; (keymap-set vertico-map "M-RET" 'vertico-quit-insert)
#+end_src

* system
** vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src
** systemd
#+begin_src emacs-lisp
  (use-package systemd
    :defer t)
#+end_src
** dired
#+begin_src emacs-lisp
  (use-package dired
    :commands dired
    :ensure nil
    :custom
    (dired-listing-switches "-lh"))
#+end_src
#+begin_src emacs-lisp
  (use-package dired-single)

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first --time-style=iso"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-open
    :config
    (setq dired-open-extensions '(("png" . "imv")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
    #+end_src
** COMMENT dirvish
:PROPERTIES:
:CREATED:  [2021-12-28 Tue 16:10]
:END:
https://github.com/alexluigit/dirvish
#+begin_src emacs-lisp
  (use-package dirvish
    :bind (:map dirvish-mode-map
                ("l" . dirvish-find-file)
                ("h" . dirvish-up-directory)))
#+end_src
** COMMENT zel
https://github.com/emacsattic/zel
find recent files ranked by frequency of use, just like z in the shell
#+begin_src emacs-lisp
  (use-package zel
    :ensure t
    :demand t
    :bind (("C-x C-r" . zel-find-file-frecent))
    :config (zel-install))
#+end_src
** emacs-pkgbuild-mode
Install it with Pacman
#+begin_src bash :results none :exports code :eval never
sudo pacman -S emacs-pkgbuild-mode
#+end_src

Then load it into emacs when opening a PKGBUILD file
#+begin_src emacs-lisp
  (use-package pkgbuild-mode
     :ensure nil
     :defer t
     :load-path "/usr/share/emacs/site-lisp/"
     :mode "/PKGBUILD$")
#+end_src
** COMMENT calendar
perhaps change keybindings a little: [[https://github.com/emacs-evil/evil-collection/issues/211][evil-collection issue]]
#+begin_src emacs-lisp
  (use-package calfw)
  (use-package calfw-org
    :custom
    (cfw:display-calendar-holidays nil)
    (calendar-week-start 1)
    :bind
    ("C-c o" . cfw:open-org-calendar))
#+end_src
** company
See https://iqss.github.io/IQSS.emacs/init.html#auto-complete_configuration for where I got it from.
#+begin_src emacs-lisp
  (use-package company
    :init (global-company-mode)
    :delight company-mode
    :config
    ;; company-require-match nil
          ;; company-async-timeout 6
          ;; company-idle-delay 0.25 ;; default 0.5,
          ;; company-minimum-prefix-length 2 ;; default 3
          ;; completion-ignore-case t
          ;; company-global-modes '(not term-mode))
    (require 'company-capf)
    (require 'company-files)
    (require 'company-math)
    (delete-dups (push 'company-math-symbols-unicode company-backends))
    (delete-dups (push 'company-capf company-backends))
    (delete-dups (push 'company-files company-backends))
    (setq tab-always-indent 'complete)
    :bind
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("<tab>" . company-complete-common)
          ("<backtab>" . company-select-previous))
    (:map company-mode-map
          ([remap indent-for-tab-command] . company-indent-or-complete-common)
          ("C-M-i" . company-complete)
          ("C-M-S-i" . counsel-company)))
#+end_src
* email
** smtp
#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :custom
    ;; default config from https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html#Settings
    (message-send-mail-function 'smtpmail-send-it)
    (starttls-use-gnutls t)
    (smtp-stream-type 'starttls))
#+end_src
** use oauth2ms
https://github.com/harishkrupo/oauth2ms/blob/main/steps.org
I have to use this repo to access my work's office365 account through XOAUTH2
#+begin_src emacs-lisp
  ;;; Call the oauth2ms program to fetch the authentication token
   (defun fetch-access-token ()
     (with-temp-buffer
	(call-process "/home/japhir/bin/oauth2ms" nil t nil "--encode-xoauth2")
	(buffer-string)))

   ;;; Add new authentication method for xoauth2
   (cl-defmethod smtpmail-try-auth-method
     (process (_mech (eql xoauth2)) user password)
     (let* ((access-token (fetch-access-token)))
	(smtpmail-command-or-throw
	 process
	 (concat "AUTH XOAUTH2 " access-token)
	 235)))

   ;;; Register the method
   (with-eval-after-load 'smtpmail
     (add-to-list 'smtpmail-auth-supported 'xoauth2))
#+end_src
** mu4e
install it with pacman ~mu~
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :commands mu4e
    :bind (("C-c m" . mu4e) ("C-c C-o" . shr-browse-url))
    :hook ((mu4e-view-mode mu4e-compose-mode) . visual-line-mode)
    :config
    (require 'mu4e)  ;; somehow this is needed, because otherwise calling org-store-link doesn't work
    (require 'mu4e-org)
    ;; Use Ivy for mu4e completions (maildir folders, etc)
    (setq mu4e-completing-read-function #'ivy-completing-read)

    ;; send email using smtp
    ;; see https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html#Settings
    ;; see also the smtp heading
    (require 'smtpmail)
    (setq mail-user-agent 'mu4e-user-agent
          message-send-mail-function 'smtpmail-send-it
          send-mail-function 'smtpmail-send-it
          ;; this is the same for both mail clients
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          smtpmail-stream-type 'starttls
          starttls-use-gnutls t
          starttls-gnutls-program "gnutls-cli"
          starttls-extra-arguments nil
          smtpmail-auth-credentials (expand-file-name "~/.authinfo")
          smtpmail-debug-info t
          smtpmail-debug-verb t)

    (setq user-full-name "Ilja J. Kocken")

    (setq mu4e-contexts
          (list
            ;; University of Hawaii
            (make-mu4e-context
             :name "hawaii"
             :enter-func (lambda () (mu4e-message "Switch to Hawaiʻi context"))
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/hawaii" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "ikocken@hawaii.edu")
                     (message-user-organization . "University of Hawaiʻi at Mānoa")
                     ;; sending email
                     (smtpmail-smtp-user . "ikocken@hawaii.edu")
                     (smtpmail-smtp-server . "smtp.gmail.com")
                     (smtpmail-smtp-service . 587)
                     ;; (smtpmail-starttls-credentials . '(("smtp.gmail.com" 587 nil nil)))
                     ;; (smtpmail-auth-credentials . '(("smtp.gmail.com" 587 "ikocken@hawaii.edu" nil)))
                     (mu4e-drafts-folder . "/hawaii/Drafts")
                     (mu4e-sent-folder . "/hawaii/Sent")
                     (mu4e-refile-folder . "/hawaii/Archive")
                     (mu4e-trash-folder . "/hawaii/Trash")
                     (mu4e-compose-signature .
                                             (concat
                                              "Dr. Ilja J. Kocken | Postdoc Researcher at SOEST |\n"
                                              "University of Hawaii at Mānoa | 1000 Pope Road |\n"
                                              "MSB 504 | Honolulu, HI 96822, USA\n"))
                     (mu4e-maildir-shortcuts .
                                             (("/hawaii/Inbox" . ?i)
                                              ;; ("/hawaii/Drafts" . ?d) ; not synched!
                                              ("/hawaii/Trash" . ?t)
                                              ;; ("/hawaii/Sent Mail" . ?s) ; deleted!
                                              ;; ("/hawaii/Junk Email" . ?t)
                                              ("/hawaii/Archive" . ?r)))
                       ;; delete gmail sent items because they're also stored in All Mail/Archive.
                     (mu4e-sent-messages-behavior . delete)))

            ;; Utrecht University
            (make-mu4e-context
             :name "solismail"
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/solismail" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "i.j.kocken@uu.nl")
                     (message-user-organization . "Utrecht University")
                     ;; sending email
                     (smtpmail-smtp-user . "i.j.kocken@uu.nl")
                     (smtpmail-smtp-server . "smtp.office365.com")
                     (smtpmail-smtp-service . 587)
                     (smtpmail-stream-type . starttls)
                     (smtpmail-starttls-credentials . (("outlook.office365.com" 587 "i.j.kocken@uu.nl" nil)))
                     (smtpmail-auth-credentials . (("outlook.office365.com" 587 "i.j.kocken@uu.nl" nil)))
                     (mu4e-drafts-folder . "/solismail/Drafts")
                     (mu4e-sent-folder . "/solismail/Sent")
                     (mu4e-refile-folder . "/solismail/Archive")
                     (mu4e-trash-folder . "/solismail/Trash")
                     (mu4e-compose-signature .
                                             (concat
                                              "Dr. Ilja Kocken\n"
                                              "Utrecht University | Vening Meinesz Gebouw A |\n"
                                              "Princetonlaan 8a, 3584 CB Utrecht, the Netherlands\n"))
                     (mu4e-maildir-shortcuts .
                                             (("/solismail/Inbox" . ?i)
                                              ;;("/NEXT" . ?n)
                                              ;; ("/solismail/Waiting" . ?w)
                                              ;; ("/solismail/Drafts" . ?c)
                                              ("/solismail/Trash" . ?t)
                                              ("/solismail/news" . ?n)
                                              ("/solismail/Important backlog" . ?l)
                                              ("/solismail/Sent" . ?s)
                                              ;; ("/solismail/Spam" . ?t)
                                              ("/solismail/Archive" . ?r)))
                     ))

            (make-mu4e-context
             :name "gmail"
             :enter-func (lambda () (mu4e-message "Switch to Personal context"))
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "iljakocken@gmail.com")
                     (message-user-organization . "Personal")
                     ;; sending email
                     (smtpmail-stream-type . starttls)
                     (smtpmail-smtp-user . "iljakocken@gmail.com")
                     (smtpmail-smtp-server . "smtp.gmail.com")
                     (smtpmail-smtp-service . 587)
                     ;; (smtpmail-starttls-credentials . '(("smtp.gmail.com" 587 nil nil)))
                     ;; (smtpmail-auth-credentials . '(("smtp.gmail.com" 587 "iljakocken@gmail.com" nil)))
                     (mu4e-drafts-folder . "/gmail/Drafts")
                     (mu4e-sent-folder . "/gmail/Sent")
                     (mu4e-refile-folder . "/gmail/Archive")
                     (mu4e-trash-folder . "/gmail/Trash")
                     (mu4e-compose-signature .
                                             (concat
                                              "Ilja"))
                     (mu4e-maildir-shortcuts .
                                             (("/gmail/Inbox" . ?i)
                                              ;; ("/gmail/Drafts" . ?d) ; not synched!
                                              ("/gmail/Trash" . ?t)
                                              ;; ("/gmail/Sent" . ?s) ; deleted!
                                              ;; ("/gmail/Junk Email" . ?t)
                                              ("/gmail/Archive" . ?r)))
                       ;; delete gmail sent items because they're also stored in All Mail/Archive.
                     (mu4e-sent-messages-behavior . delete)))

            ))

    (setq mu4e-context-policy 'pick-first) ;; default to hawaii gmail

    (setq mu4e-change-filenames-when-moving t ; important for isync
          mu4e-headers-date-format "%Y-%m-%d %H:%M"
          mu4e-headers-fields
          '((:date          .  17)
            (:flags         .   5)
            (:from          .  22)
            (:subject       .  nil))
          mu4e-get-mail-command "env PATH=/usr/bin:/home/japhir/bin: mbsync -a"
          mu4e-headers-include-related t
          mu4e-compose-format-flowed t  ; plain-text nice to read on phone
          ;; use-hard-newlines t             ; above doesn't work for Outlooks, so disabled for colleagues
          mu4e-confirm-quit nil
          mu4e-view-show-images t)

     ;; if you press a V on an email you open it in the browser
    (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)
    ;; use imagemagick, if available
    ;; (when (fboundp 'imagemagick-register-types)
    ;;   (imagemagick-register-types))
    (setq mu4e-org-link-query-in-headers-mode nil)

    ;; maybe I want this at some point? currently not working, mu must have changed it query syntax
    (add-to-list 'mu4e-bookmarks
                 '(:name "All Inboxes"
                   :query "maildir:/hawaii/Inbox OR maildir:/solismail/inbox OR maildir:/gmail/Inbox"
                         :key ?i))
    (add-to-list 'mu4e-bookmarks
                 '(:name "All sent mail"
                   :query "from:ikocken@hawaii.edu OR from:iljakocken@gmail.com OR from:i.j.kocken@uu.nl"
                   :key ?s))
    )
#+end_src

** SOME COMMENT mu4e-thread-folding
:LOGBOOK:
- State "SOME"       from              [2021-09-26 Sun 13:14]
:END:
#+begin_src emacs-lisp :tangle no
  (use-package mu4e-thread-folding
    :quelpa (mu4e-thread-folding :fetcher github :repo "rougier/mu4e-thread-folding"))
#+end_src
** COMMENT mu4e-alert
#+begin_src emacs-lisp :tangle no
  (use-package mu4e-alert
    :after mu4e
    :custom
    (mu4e-alert-interesting-mail-query
     (concat "flag:unread AND maildir:/inbox"
             ;; " AND NOT maildir:\"/news\""
             ))
    :config
    (mu4e-alert-set-default-style 'libnotify)
    :hook (after-init . mu4e-alert-enable-notifications))
#+end_src
* science packages
** COMMENT eval-in-repl
from: https://iqss.github.io/IQSS.emacs/init.html#general_repl_(comint)_config
use other programming languages in interactive environment, similar to how ESS does it
#+begin_src emacs-lisp
  (use-package eval-in-repl
    :hook (comint-mode . (lambda() (setq truncate-lines 1)))
    :custom
    (comint-process-echoes t
      eir-repl-placement 'below)
    (comint-scroll-to-bottom-on-input t)
    (comint-scroll-to-bottom-on-output t)
    (comint-move-point-for-output t))
#+end_src

#+RESULTS:
| lambda | nil | (setq truncate-lines 1) |

** ess
https://ess.r-project.org/
emacs speaks statistics, work with R etc.
*** insert pipe ~|>~ function
#+begin_src emacs-lisp
  (defun japhir/insert-r-pipe ()
    "Insert the pipe operator in R, |>"
    (interactive)
    (just-one-space 1)
    (insert "|>")
    (reindent-then-newline-and-indent))
#+end_src

#+RESULTS:
: japhir/insert-r-pipe

*** ess use-package
#+begin_src emacs-lisp
  (use-package ess
    ;; :load-path "/usr/share/emacs/site-lisp/ess"
    :init (require 'ess-site)  ;; seems like this is needed to load the minor modes as well keybindings don't work without it
    :hook (
           ((ess-r-mode inferior-ess-r-mode) . electric-layout-mode)
           ;; (ess-r-post-run . (lambda ()
           ;;    (ess-load-file (make-temp-file nil nil nil
           ;;                                "Sys.setenv(\"DISPLAY\"=\":0.0\")")))
           )
    :commands R
    :bind (:map ess-r-mode-map
           (";" . ess-insert-assign)
           ;; RStudio equivalents
           ("M--" . ess-insert-assign)
           ("C-S-m" . japhir/insert-r-pipe)
           :map inferior-ess-r-mode-map
           (";" . ess-insert-assign)
           ("M--" . ess-insert-assign)
           ("C-S-m" . japhir/insert-r-pipe))
    :config
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (or (string= lang "R")
               (string= lang "python")
               (string= lang "elisp")
               (string= lang "emacs-lisp")
               (string= lang "julia")
               (string= lang "stan")
               (string= lang "sh")
               (string= lang "latex"))))
    :custom
    ;; display-buffer-alist
          ;; '(("*R Dired*"
          ;;    (display-buffer-reuse-window display-buffer-in-side-window)
          ;;    (side . right)
          ;;    (slot . -1)
          ;;    (window-width . 0.33))
          ;;   ("*R:"
          ;;    (display-buffer-reuse-window display-buffer-in-side-window)
          ;;    (slot . 2)
          ;;    (window-width . 0.5))
          ;;   ("*Help*"
          ;;    (display-buffer-reuse-window display-buffer-in-side-window)
          ;;    (side . right)
          ;;    (slot . 1)
          ;;    (window-width . 0.33)))
          ;; ess-help-own-frame 'one
          ;; ess-auto-width 'window
    (org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
    (ess-style 'RStudio)
    (ess-use-auto-complete nil)
    (ess-use-company t)
    (ess-indent-with-fancy-comments nil)
    (ess-pdf-viewer-pref 'emacsclient)
    (inferior-R-args "--no-restore-history --no-save")
    (ess-ask-for-ess-directory nil)
    (ess-R-font-lock-keywords
          (quote
           ((ess-R-fl-keyword:modifiers)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:keywords . t)
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-R-fl-keyword:fun-cals . t)
            (ess-R-fl-keyword:numbers)
            (ess-R-fl-keyword:operators . t)
            (ess-R-fl-keyword:delimiters)
            (ess-R-fl-keyword:=)
            (ess-R-fl-keyword:F&T)))))
#+end_src

#+RESULTS:
: japhir/insert-r-pipe

*** ess-view
[[https://github.com/GioBo/ess-view][GioBo/ess-view: A small package to view dataframes within spreadsheet softwares]]
allows you to quickly look at dataframes in a spreadsheet software (in my case LibreOffice)
#+begin_src emacs-lisp
  (use-package ess-view
    :after ess)
#+end_src

#+RESULTS:

*** electric-spacing operator
Put spaces around operators such as +, -, etc.
#+begin_src emacs-lisp
  (use-package electric-operator
    :hook ((R-mode ess-r-mode inferior-ess-r-mode) . electric-operator-mode)
    :config
    (electric-operator-add-rules-for-mode 'stan-mode
                                          (cons "," ", ")
                                          (cons "~" " ~ "))

    (electric-operator-add-rules-for-mode 'ess-r-mode
                                          (cons ".+" " . + ")
                                          ;; these should never have spacing around them
                                          (cons ":" ":") ;; for ranges, should not add space
                                          (cons "::" "::") ;; to call a function from a package
                                          (cons ":::" ":::") ;; to call an internal function from a package
                                          (cons ":=" " := ") ;; walrus operator
                                          (cons "? " "?")
                                          (cons "){" ") {")
                                          (cons "}else{" "} else {")
                                          (cons "for(" "for (")
                                          (cons "if(" "if (")
                                          (cons "while(" "while (")
                                          (cons "{{" " {{ ") ;; curly-curly tidyverse
                                          (cons "}}" " }} ")
                                          (cons "!!" " !!")
                                          (cons "!!!" " !!!")
                                          (cons "^" "^") ;;
                                          (cons "|>" " |> ") ;; r 4.0 built-in pipe
                                          )
    :custom
    (electric-operator-R-named-argument-style 'spaced))
#+end_src

#+RESULTS:
| electric-operator-mode | electric-layout-mode |

*** compilation window height
#+begin_src emacs-lisp
  (setq compilation-window-height 15)
#+end_src

#+RESULTS:
: 15

*** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src

#+RESULTS:

** julia
#+begin_src emacs-lisp :tangle no
  (use-package julia-mode)
  (use-package org-contrib
    :init
    (require 'ob-julia)
    :commands org-babel-execute:julia
    :config
    ;; (setq org-babel-julia-command-arguments
    ;;       `("--sysimage"
    ;;         ,(when-let ((img "~/.local/lib/julia.so")
    ;;                     (exists? (file-exists-p img)))
    ;;            (expand-file-name img))
    ;;         "--threads"
    ;;         ,(number-to-string (- (doom-system-cpus) 2))
    ;;         "--banner=no"))
    )
#+end_src

** stan
https://mc-stan.org/
check out this worg entry on working inline with stan models! https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-stan.html
#+begin_src emacs-lisp
  (use-package stan-mode
    :mode ("\\.stan\\'" . stan-mode)
    :hook (stan-mode . stan-mode-setup)
    :config
    (setq stan-indentation-offset 2)
    ;; I've used cmdstanr to install cmdstan because it's not in my repositories
    ;; don't forget to update this after updating from within an R session!
    (setq org-babel-stan-cmdstan-directory  "/home/japhir/.cmdstan/cmdstan-2.32.2"))

  (use-package company-stan
    :hook (stan-mode . company-stan-setup))

  (use-package eldoc-stan
    :hook (stan-mode . eldoc-stan-setup))

  (use-package flycheck-stan
    :hook ((stan-mode . flycheck-stan-stanc2-setup)
           (stan-mode . flycheck-stan-stanc3-setup))
    :config
    (setq flycheck-stanc-executable nil)
    (setq flycheck-stanc3-executable nil))

  ;;; stan-snippets.el
  (use-package stan-snippets
    :hook (stan-mode . stan-snippets-initialize)
    ;;
    :config
    ;; No configuration options as of now.
    )
#+end_src

#+RESULTS:
: t

** COMMENT ob-stan
org-mode babel intergation for stan

this has now migrated away from org-contrib to https://git.kyleam.com/ob-stan/ so if I want to get this to work I should probably figure out a straight recipe for it.

I've evaluated this once to install it, but straight was interfering with my regular setup.
#+begin_src emacs-lisp :eval never :tangle no
  (use-package ob-stan
    :straight (ob-stan
               :type git
               :host nil
               :repo "https://git.kyleam.com/ob-stan"))
#+end_src

So for now we just load it manually with:
#+begin_src emacs-lisp
  (load "~/.emacs.d/straight/repos/ob-stan/ob-stan.el")
#+end_src

** markdown-mode
markdown mode for writing
#+begin_src emacs-lisp
  (use-package markdown-mode :defer t)
#+end_src

#+RESULTS:

** polymode
for working with .Rmd files etc.
#+begin_src emacs-lisp
  (use-package polymode :defer t)
  (use-package poly-markdown :defer t)
  (use-package poly-R)
#+end_src

#+RESULTS:

** COMMENT matlab
if I'm ever required to work in non-open-source
#+begin_src emacs-lisp
  (use-package matlab
    :ensure nil
    :init (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
    :mode ("\\.m\\'" . matlab-mode)
    :interpreter "matlab"
    :custom
    (matlab-indent-function t)
    (matlab-indent-function "matlab"))
#+end_src

#+RESULTS:
: ((matlab . matlab) (r . ess-r-mode) (Rscript . ess-r-mode) (ruby1.8 . ruby-mode) (ruby1.9 . ruby-mode) (jruby . ruby-mode) (rbx . ruby-mode) (ruby . ruby-mode) (python[0-9.]* . python-mode) (rhino . js-mode) (gjs . js-mode) (nodejs . js-mode) (node . js-mode) (gawk . awk-mode) (nawk . awk-mode) (mawk . awk-mode) (awk . awk-mode) (pike . pike-mode) (\(mini\)?perl5? . perl-mode) (wishx? . tcl-mode) (tcl\(sh\)? . tcl-mode) (expect . tcl-mode) (octave . octave-mode) (scm . scheme-mode) ([acjkwz]sh . sh-mode) (r?bash2? . sh-mode) (dash . sh-mode) (mksh . sh-mode) (\(dt\|pd\|w\)ksh . sh-mode) (es . sh-mode) (i?tcsh . sh-mode) (oash . sh-mode) (rc . sh-mode) (rpm . sh-mode) (sh5? . sh-mode) (tail . text-mode) (more . text-mode) (less . text-mode) (pg . text-mode) (make . makefile-gmake-mode) (guile . scheme-mode) (clisp . lisp-mode) (emacs . emacs-lisp-mode))

** pandoc-mode
exporting markdown
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :defer t
    :hook markdown-mode)
#+end_src

#+RESULTS:
| pandoc-mode |

** mermaid
#+begin_src emacs-lisp
  (use-package ob-mermaid
    :custom
    (ob-mermaid-cli-path "/usr/bin/mmdc"))
#+end_src

#+RESULTS:

** org-pandoc
https://github.com/kawabata/ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :after org
    :custom
    (org-pandoc-options '((bibliography
          . "/home/japhir/Documents/References/PhD.bib"))
          ;; org-pandoc-options-for-docx '((reference-docx
          ;; . "/home/japhir/SurfDrive/PhD/chapters/wordtemplate.docx"))
          ))
#+end_src

#+RESULTS:

** LaTeX (AUCTeX, RefTeX)
for working with \LaTeX
#+begin_src emacs-lisp
  ;(load "auctex.el" nil t t)
  ;(load "preview-latex.el" nil t t)
  (use-package tex
    :load-path "/usr/share/emacs/site-lisp/auctex/"
    :hook
    (LaTeX-mode . turn-on-reftex)
    (LaTeX-mode . turn-on-auto-fill)
    (LaTeX-mode . prettify-symbols-mode)
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq reftex-plug-into-AUCTeX t))
#+end_src

** COMMENT hl-todo
hmm it does overwrite my nice highlighting of NEXT
#+begin_src emacs-lisp
  (use-package hl-todo
    :bind (:map hl-todo-mode-map
                ("C-c k" . hl-todo-previous)
                ("C-c j" . hl-todo-next))
    :hook ((LaTeX ess ess-r org) . hl-todo-mode))
#+end_src

#+RESULTS:

** COMMENT helm-bibtex
#+begin_src emacs-lisp
  (setq
   bibtex-completion-notes-path "/home/japhir/SurfDrive/bibliography/notes/"
   ;; bibtex-completion-bibliography "/home/japhir/SurfDrive/bibliography/references.bib" ; defined elsewhere
   ;; bibtex-completion-pdf-field "file"
   bibtex-completion-notes-template-multiple-files
   (concat
   "#+title: ${title}\n"
   "#+created: %u\n"
   "#+last_modified: %U\n"
   "#+roam_key: cite:${=key=}\n\n\n"
   "* TODO Notes\n"
   ":PROPERTIES:\n"
   ":Custom_ID: ${=key=}\n"
   ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
   ":AUTHOR: ${author-abbrev}\n"
   ":JOURNAL: ${journaltitle}\n"
   ":DATE: ${date}\n"
   ":YEAR: ${year}\n"
   ":DOI: ${doi}\n"
   ":URL: ${url}\n"
   ":END:\n\n"))
#+end_src

#+RESULTS:
#+begin_example
,#+title: ${title}
,#+created: %u
,#+last_modified: %U
,#+roam_key: cite:${=key=}


,* TODO Notes
:PROPERTIES:
:Custom_ID: ${=key=}
:NOTER_DOCUMENT: %(orb-process-file-field "${=key=}")
:AUTHOR: ${author-abbrev}
:JOURNAL: ${journaltitle}
:DATE: ${date}
:YEAR: ${year}
:DOI: ${doi}
:URL: ${url}
:END:

#+end_example

* secret directories
These are all the settings that require secret directories, such as my org
agenda files and google overwrite the settings with "<...>"
syntax above.
#+begin_src emacs-lisp
  ;; (use-package emacsdirs)
  (load "~/.emacs.d/secretdirs.el" t)
#+end_src

* tree-sitter
:PROPERTIES:
:CREATED:  [2022-09-27 Tue 16:46]
:END:
https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
#+begin_src emacs-lisp
  (require 'treesit)
  (global-tree-sitter-mode)
  (add-hook 'ess-r-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'c-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'rust-mode-hook #'tree-sitter-hl-mode)
  ;; (add-hook 'ess-r-mode-hook #'tree-sitter-indent-mode)
  (customize-set-variable 'treesit-font-lock-level 4)
  ;; (use-package tree-sitter-indent)
  ;; (use-package tree-sitter-ispell)
  ;; (use-package tree-sitter-ess-r
  ;;   :hook (ess-r-mode-hook . tree-sitter-ess-r-mode-activate))
  (setq major-mode-remap-alist
   '((bash-mode . bash-ts-mode)
     (c-mode . rust-c-mode)
     (python-mode . python-ts-mode)
     (rust-mode . rust-ts-mode)))

  (use-package evil-textobj-tree-sitter
    ;; copied from https://github.com/meain/evil-textobj-tree-sitter README
    :config
    ;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
    (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
    ;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
    (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
    ;; You can also bind multiple items and we will match the first one we can find
    (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer")))
    ;; The first arguemnt to `evil-textobj-tree-sitter-get-textobj' will be the capture group to use
    ;; and the second arg will be an alist mapping major-mode to the corresponding query to use.
    (define-key evil-outer-text-objects-map "m" (evil-textobj-tree-sitter-get-textobj "import"
                                                  '((python-mode . [(import_statement) @import])
                                                    (c-mode . [(preproc_include) @import]))))
    ;; Goto start of next function
    (define-key evil-normal-state-map (kbd "]f") (lambda ()
                                                   (interactive)
                                                   (evil-textobj-tree-sitter-goto-textobj "function.outer")))
    ;; Goto start of previous function
    (define-key evil-normal-state-map (kbd "[f") (lambda ()
                                                   (interactive)
                                                   (evil-textobj-tree-sitter-goto-textobj "function.outer" t)))
    ;; Goto end of next function
    (define-key evil-normal-state-map (kbd "]F") (lambda ()
                                                   (interactive)
                                                   (evil-textobj-tree-sitter-goto-textobj "function.outer" nil t)))
    ;; Goto end of previous function
    (define-key evil-normal-state-map (kbd "[F") (lambda ()
                                                   (interactive)
                                                   (evil-textobj-tree-sitter-goto-textobj "function.outer" t t)))
    )
#+end_src

#+RESULTS:
: t

* reset gc-cons-threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1)
#+end_src
